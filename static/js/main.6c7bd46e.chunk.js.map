{"version":3,"sources":["web/AlertDialog.tsx","web/App-classes.ts","parser/parser_chat.ts","parser/group.ts","common.ts","parser/analyse.ts","parser/index.ts","web/StepSource.tsx","web/StepConfig.tsx","web/storage.ts","web/StepResult.tsx","web/MultiStep.tsx","web/App.tsx","serviceWorker.ts","index.tsx"],"names":["AlertDialog","open","onClose","body","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","id","DialogActions","Button","onClick","color","autoFocus","useStepperStyles","makeStyles","_theme","createStyles","Control","display","marginTop","Body","Container","ControlButton","width","marginLeft","removeSystemTextConverter","logLine","lines","content","linesToRemove","i","length","match","push","reverse","splice","defaultConverter","trim","exportFromLog","headerParser","line","matches","RegExp","source","exec","time","name","number","player","logLineConverter","includes","copyFromSideWindow","title","flow","copyFromChat","copyFromMobile","parseChat","data","logLines","firstLogConfig","undefined","parsedHeader","logConfig","result","currentLogLine","split","compact","map","getPlayerIdGroup","ids","defaultGeneralConfig","removeLinesStartedWithBracket","removeLinesStartedWithDot","getGeneralConfig","config","key","presetDescribedColors","value","isLight","Color","presetColors","findFirstPlayerConfig","configPlayers","playerIdGroup","playerId","findFirstUnusedPresetColor","existingColors","forEach","configPlayer","find","parseAndGroup","players","parsedLine","majorPlayerId","allPlayerIds","values","groupByPlayers","StepSource","props","onNextStep","stepperClasses","useState","text","setText","alertControl","setAlertControl","show","Grid","container","className","item","xs","TextField","label","placeholder","variant","multiline","fullWidth","rows","onChange","event","target","justify","disabled","groupResult","processResult","useStyles","PlayerConfig","Center","alignItems","classes","defaultValue","onBlur","setName","FormGroup","row","FormControl","Switch","checked","enabled","setEnabled","style","visibility","Select","backgroundColor","padding","native","setColor","describedColor","StepConfigPlayers","playerIds","setPlayer","displayName","StepConfigGeneral","setValue","FormControlLabel","control","StepConfig","initState","onPrevStep","setPlayers","useRef","general","generalConfig","setGeneralConfig","current","newConfig","emptyConfiguration","loadConfig","Store","get","saveConfig","set","Output","fontFamily","fontSize","borderColor","borderStyle","borderWidth","borderRadius","maxHeight","overflowY","margin","StepResult","onRestart","oldConfig","playersConfig","resultLines","filter","processLines","processedLines","onDoubleClick","selection","window","getSelection","element","document","getElementById","range","createRange","selectNode","removeAllRanges","addRange","paragraphId","contentLine","contentId","concat","MultiStep","onInit1","Step1","step1","onInit2","Step2","step2","onInit3","Step3","step3","session","setSession","initStates","setInitStates","handleRestart","useHeaderStyles","logo","marginRight","horizontalFill","flex","toolbarIcon","height","fill","Header","repoUrl","AppBar","position","Toolbar","Avatar","alt","src","Typography","IconButton","aria-label","href","rel","svg","GithubIcon","Main","analysedResult","grouped","currentConfig","clone","nextConfig","analyse","theme","createMuiTheme","palette","primary","main","secondary","App","ThemeProvider","maxWidth","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qdA2CeA,EAzBiC,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,KAChE,OACE,6BACE,kBAACC,EAAA,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTG,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAmBC,GAAG,4BACnBP,IAGL,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAASX,EAASY,MAAM,UAAUC,WAAS,GAAnD,oBChCGC,EAAmBC,aAAW,SAACC,GAAD,OACzCC,YAAa,CACXC,QAAS,CACPC,QAAS,OACTC,UAAW,IAEbC,KAAM,GAENC,UAAW,GAEXC,cAAe,CACbC,MAAO,IACPC,WAAY,S,mRCmBlB,SAASC,EAA0BC,GACjC,GAAe,MAAXA,EACF,OAAO,KAGT,IAFA,IAAMC,EAAQD,EAAQE,QAChBC,EAA0B,GACvBC,EAAI,EAAGA,EAAIH,EAAMI,OAAS,EAAGD,IAAK,CAGxB,KAAbH,EAAMG,KACRH,EAAMG,EAAE,GAAGE,MAHU,+EAIrBL,EAAMG,EAAE,GAAGE,MAHe,8GAK1BH,EAAcI,KAAKH,GACnBD,EAAcI,KAAKH,EAAE,GACrBA,KAGJD,EAAcK,UACd,cAAgBL,EAAhB,eAA+B,CAA1B,IAAMC,EAAC,KACVH,EAAMQ,OAAOL,EAAG,GAElB,OAAOJ,EAGT,SAASU,EAAiBV,GACxB,GAAe,MAAXA,EACF,OAAO,KAET,IADA,IAAMC,EAAQD,EAAQE,QAChBD,EAAMI,OAAS,GAAyB,KAApBJ,EAAM,GAAGU,QACjCV,EAAMQ,OAAO,EAAG,GAElB,KAAMR,EAAMI,OAAS,GAAsC,KAAjCJ,EAAMA,EAAMI,OAAO,GAAGM,QAC9CV,EAAMQ,OAAOR,EAAMI,OAAO,EAAG,GAE/B,OAAqB,IAAjBJ,EAAMI,OACD,KACFL,EAKT,IAAMY,EAA2B,CAC/BC,aAAc,SAACC,GACb,IAGMC,EADY,IAAIC,OAAJ,WAFE,+DAEyBC,QAA3B,OADA,wBAC8CA,OAA9C,MACQC,KAAKJ,GAC/B,IAAKC,EACH,OAAO,KAN0C,kBAOhBA,EAPgB,GAOtCI,GAPsC,WAOhCC,EAPgC,KAO1BC,EAP0B,KAQnD,MAAO,CACLC,OAAQ,CACNF,OACAC,OAAQV,IAAKU,EAAQ,SAEvBF,SAGJI,iBAAkB,SAACvB,GACjB,MAAI,CAAC,QAAS,WAAWwB,SAASxB,EAAQsB,OAAOD,QAAU,IAClD,KACFX,EAAiBV,KAMtByB,EAAgC,CACpCZ,aAAc,SAACC,GACb,IACMC,EADY,kGACQG,KAAKJ,GAC/B,IAAKC,EACH,OAAO,KAJ0C,kBAKjBA,EALiB,GAKtCW,GALsC,WAMnD,MAAO,CACLJ,OAAQ,CACNF,KAR+C,KAS/CM,SAEFP,KAXiD,OAcrDI,iBAAkB,SAACvB,GACjB,OAAO2B,IACL5B,EACAW,EAFKiB,CAGL3B,KAMA4B,EAA0B,CAC9Bf,aAAc,SAACC,GACb,IACMC,EADY,uEACQG,KAAKJ,GAC/B,IAAKC,EACH,OAAO,KAJ0C,kBAKjBA,EALiB,GAKtCW,GALsC,WAMnD,MAAO,CACLJ,OAAQ,CACNF,KAR+C,KAS/CM,SAEFP,KAXiD,OAcrDI,iBAAkB,SAACvB,GACjB,OAAO2B,IACL5B,EACAW,EAFKiB,CAGL3B,KAMA6B,EAA4B,CAChChB,aAAc,SAACC,GACb,IACMC,EADY,mCACQG,KAAKJ,GAC/B,IAAKC,EACH,OAAO,KAJ0C,kBAKxBA,EALwB,QAMnD,MAAO,CACLO,OAAQ,CACNF,KAR+C,MAUjDD,KAViD,OAarDI,iBAAkB,SAACvB,GACjB,OAAOU,EAAiBV,KAIrB,SAAS8B,EAAUC,GACxB,IAAMC,EAAyB,GAC3BC,OAAwCC,EAFO,uBAGnD,IAHmD,IAGnD,EAHmD,iBAGxCpB,EAHwC,QAI3CqB,EAAgB,WACpB,GAAIF,EACF,OAAOA,EAAepB,aAAaC,GACrC,cAAwB,CAACe,EAAgBjB,EAAea,EAAoBG,GAA5E,eAA2F,CAAtF,IAAMQ,EAAS,KACZC,EAASD,EAAUvB,aAAaC,GACtC,GAAIuB,EAEF,OADAJ,EAAiBG,EACVC,EAGX,OAAO,KAVa,GAYtB,GAAIF,EACFH,EAASzB,K,yVAAT,IACK4B,EADL,CAEEjC,QAAS,WAGX,GAAI+B,EAAgB,CAClB,IAAMK,EAAyCN,EAASA,EAAS3B,OAAS,GAEtEiC,GACFA,EAAepC,QAAQK,KAAKO,KAvBpC,EAAmBiB,EAAKQ,MAAM,MAA9B,+CAAsC,IAHa,kFAiCnD,OAAKN,EAME,CAAED,SAHiBQ,IACxBR,EAASS,IAAIR,EAAeV,oBAHrB,CAAES,SAAU,I,sBClMvB,SAASU,EAAiBpB,GACxB,IAAMqB,EAAgB,GAItB,OAHIrB,EAAOD,QACTsB,EAAIpC,KAAJ,aAAee,EAAOD,SACxBsB,EAAIpC,KAAJ,eAAiBe,EAAOF,OACjBuB,E,qSCwBF,IAAMC,GAAgD,CAC3DC,+BAA+B,EAC/BC,2BAA2B,GAGhBC,GAAmB,SAAgCC,EAAuBC,GACrF,OAAOD,EAAOC,IAAQL,GAAqBK,IAchCC,GAA0C,CACrD,CAAEC,MAAO,QAAS/B,KAAM,gBACxB,CAAE+B,MAAO,SAAU/B,KAAM,gBACzB,CAAE+B,MAAO,MAAO/B,KAAM,gBACtB,CAAE+B,MAAO,QAAS/B,KAAM,gBACxB,CAAE+B,MAAO,SAAU/B,KAAM,gBACzB,CAAE+B,MAAO,SAAU/B,KAAM,gBACzB,CAAE+B,MAAO,OAAQ/B,KAAM,gBACvB,CAAE+B,MAAO,UAAW/B,KAAM,gBAC1B,CAAE+B,MAAO,SAAU/B,KAAM,gBACzB,CAAE+B,MAAO,QAAS/B,KAAM,gBACxB,CAAE+B,MAAO,QAAS/B,KAAM,gBACxB,CAAE+B,MAAO,OAAQ/B,KAAM,gBACvB,CAAE+B,MAAO,SAAU/B,KAAM,gBACzB,CAAE+B,MAAO,YAAa/B,KAAM,gBAC5B,CAAE+B,MAAO,QAAS/B,KAAM,gBACxB,CAAE+B,MAAO,QAAS/B,KAAM,gBACxB,CAAE+B,MAAO,OAAQ/B,KAAM,iBACvBqB,KAAI,gBAAGU,EAAH,EAAGA,MAAH,O,2VAAA,+BAEJA,QACAC,QAASC,KAAMF,GAAOC,e,6jBCnExB,IAAME,GAAyBJ,GAAsBT,KAAI,qBAAGU,SAE5D,SAASI,GACPC,EACAC,GACsB,IAAD,uBACrB,YAAuBA,EAAvB,+CAAsC,CAAC,IAA5BC,EAA2B,QACpC,GAAIF,EAAcE,GAChB,OAAOF,EAAcE,IAHJ,kFAKrB,OAAO,KAGT,SAASC,GACPL,EACAE,GAEA,IAAMI,EAA0C,GAIhD,OAHAC,IAAQL,GAAe,SAACM,GACtBF,EAAeE,EAAa7E,QAAS,KAEhCqE,EAAaS,MAAK,SAAC9E,GAAD,OAAoB2E,EAAe3E,OAAW,QC7BlE,SAAS+E,GAAc/C,GAE5B,OHWK,SAAwBoB,GAC7B,IAAMpC,EAAwB,GACxBgE,EAA0C,GAFe,uBAG/D,YAAyB5B,EAAOL,SAAhC,+CAA0C,CAAC,IAAhCkC,EAA+B,QAChC5C,EAA0B4C,EAA1B5C,OAAQH,EAAkB+C,EAAlB/C,KAAMjB,EAAYgE,EAAZhE,QAChBuD,EAAgBf,EAAiBpB,GACjC6C,EAAgBV,EAAc,GAC/BQ,EAAQE,KACXF,EAAQE,GAAiB,CACvBT,SAAUS,EACVC,aAAcX,EACdrC,KAAME,EAAOF,KACbC,OAAQC,EAAOD,SAEnBpB,EAAMM,KAAK,CACTmD,SAAUS,EACVhD,OACAO,MAAOJ,EAAOI,MACdxB,aAlB2D,kFAqB/D,MAAO,CACLD,QACAgE,QAASI,IAAOJ,IGlCXK,CAD0BxC,EAAUb,I,+NCmBtC,IAAMsD,GAAwC,SAACC,GAA4B,IACxEC,EAAeD,EAAfC,WACFC,EAAiBvF,IAFwD,EAGvDwF,mBAAiB,IAHsC,mBAGxEC,EAHwE,KAGlEC,EAHkE,OAKvCF,mBAA6B,CACnEvG,MAAM,IANuE,mBAKxE0G,EALwE,KAK1DC,EAL0D,KAS/E,IAAKP,EAAMQ,KACT,OAAO,KAcT,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWT,EAAe/E,WACxC,kBAACsF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIF,UAAWT,EAAehF,MAC3C,kBAAC4F,EAAA,EAAD,CACEzG,GAAG,iBACH0G,MAAM,eACNC,YAAY,yGACZC,QAAQ,WACRC,WAAS,EACTC,WAAS,EACTC,KAAM,GACNT,UAAU,mBACVU,SAAU,SAACC,GACTjB,EAAQiB,EAAMC,OAAO5C,QAEvBA,MAAOyB,KAGX,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIW,QAAQ,WAAWb,UAAWT,EAAenF,SAC9D,kBAACR,EAAA,EAAD,CACE0G,QAAQ,YACRxG,MAAM,UACNgH,SAAUrB,EAAKvE,OAAS,EACxB8E,UAAWT,EAAe9E,cAC1BZ,QAAS,WACP,IAAMqD,EArChB,SAAuBuC,GACrB,IAAMsB,EAAclC,GAAcY,GAClC,GAAmC,IAA/BsB,EAAYjC,QAAQ5D,QAA6C,IAA7B6F,EAAYjG,MAAMI,OAO1D,OAAO6F,EANLnB,EAAgB,CACd3G,MAAM,EACNE,KAAM,uKAgCa6H,CAAcvB,GACzBvC,GACFoC,EAAWpC,KARjB,uBAeF,kBAAC,EAAD,eACEhE,QAAS,kBAAY0G,E,2VAAgB,IAChCD,EAD+B,CAElC1G,MAAM,OAEJ0G,M,+mBCnDZ,IAAMsB,GAAYhH,aAAW,kBAC3BE,YAAa,CACX+G,aAAc,GAEdC,OAAQ,CACN9G,QAAS,OACT+G,WAAY,eAKZF,GAA4C,SAAC7B,GACjD,IAAMgC,EAAUJ,KAChB,OACE,kBAACnB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACJ,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CACEmB,aAAcjC,EAAMpD,KACpBqE,QAAQ,WACRE,WAAS,EACTe,OAAQ,SAACZ,GACPtB,EAAMmC,QAAQb,EAAMC,OAAO5C,OAAS,QAI1C,kBAAC8B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGF,UAAWqB,EAAQF,QACnC,kBAACrB,EAAA,EAAD,CAAMC,WAAS,GACb,kBAAC0B,GAAA,EAAD,CAAWC,KAAG,EAAC1B,UAAWqB,EAAQF,QAChC,kBAACQ,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,QAASxC,EAAMyC,QACfpB,SAAU,SAACC,EAA4CkB,GACrDxC,EAAM0C,WAAWF,IAEnB7D,MAAM,aAGV,kBAAC2D,GAAA,EAAD,CAAaK,MAAO3C,EAAMyC,QAAU,GAAK,CAAEG,WAAY,WACrD,kBAACC,GAAA,EAAD,CACEF,MAAO,CACLG,gBAAiB9C,EAAMvF,MACvBA,MAAOoE,KAAMmB,EAAMvF,OAAOmE,UAAY,QAAU,QAChDmE,QAAS,GAEXC,QAAM,EACNrE,MAAOqB,EAAMvF,MACb4G,SAAU,SAACC,GACTtB,EAAMiD,SAAS3B,EAAMC,OAAO5C,SAG7BD,GAAsBT,KAAI,SAACiF,GAAqD,IACvEvE,EAAyBuE,EAAzBvE,MAAO/B,EAAkBsG,EAAlBtG,KAAMgC,EAAYsE,EAAZtE,QACrB,OACE,4BACEH,IAAKE,EACLA,MAAOA,EACPgE,MAAO,CACLG,gBAAiBnE,EACjBlE,MAAOmE,EAAU,QAAU,UAG5BhC,GAAQ+B,cA2B3BwE,GAAsD,SAACnD,GAAmC,IACtFoD,EAAkCpD,EAAlCoD,UAAW3D,EAAuBO,EAAvBP,QAAS4D,EAAcrD,EAAdqD,UAC5B,OACE,kBAAC5C,EAAA,EAAD,CAAMC,WAAS,GACZ0C,EAAUnF,KAAI,SAACiB,GACd,IAAMpC,EAAS2C,EAAQP,GACvB,OACE,kBAAC,GAAD,CACET,IAAKS,EACLtC,KAAME,EAAOwG,YACbnB,QAAS,SAACxD,GACR0E,EAAUnE,EAAD,MACJpC,EADI,CAEPwG,YAAa3E,MAGjB8D,QAAS3F,EAAO2F,QAChBC,WAAY,SAAC/D,GACX0E,EAAUnE,EAAD,MACJpC,EADI,CAEP2F,QAAS9D,MAGblE,MAAOqC,EAAOrC,MACdwI,SAAU,SAACtE,GACT0E,EAAUnE,EAAD,MACJpC,EADI,CAEPrC,MAAOkE,aAejB4E,GAAsD,SAACvD,GAAmC,IACtFrB,EAAoBqB,EAApBrB,MAAO6E,EAAaxD,EAAbwD,SAEf,OACE,kBAACpB,GAAA,EAAD,KACE,kBAACqB,GAAA,EAAD,CACEC,QACE,kBAACnB,GAAA,EAAD,CACEC,QAASjE,GAAiBI,EAAO,iCACjC0C,SAAU,SAACC,GACTkC,EAAS,MACJ7E,EADG,CAENN,8BAA+BiD,EAAMC,OAAOiB,YAGhD/H,MAAM,YAGVsG,MAAM,qDAER,kBAAC0C,GAAA,EAAD,CACEC,QACE,kBAACnB,GAAA,EAAD,CACEC,QAASjE,GAAiBI,EAAO,6BACjC0C,SAAU,SAACC,GACTkC,EAAS,MACJ7E,EADG,CAENL,0BAA2BgD,EAAMC,OAAOiB,YAG5C/H,MAAM,YAGVsG,MAAM,uDAMD4C,GAAyC,SAAC3D,GAA6B,IAC1E4D,EAAsC5D,EAAtC4D,UAAWC,EAA2B7D,EAA3B6D,WAAY5D,EAAeD,EAAfC,WACzBC,EAAiBvF,IAF0D,EAGnDwF,oBAC5B,kBAAMyD,EAAUpF,OAAOiB,SAAW,MAJ6C,mBAG1EA,EAH0E,KAGjEqE,EAHiE,KAM3EV,EAAYW,iBAAiBH,EAAUR,WANoC,EAOvCjD,oBACxC,kBAAMyD,EAAUpF,OAAOwF,SAAW,MAR6C,mBAO1EC,EAP0E,KAO3DC,EAP2D,KAU3EzI,EAAQsI,iBAAuBH,EAAUnI,OAK/C,OAAKuE,EAAMQ,KAIT,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWT,EAAe/E,WACxC,kBAACsF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIF,UAAWT,EAAehF,MAC3C,kBAAC,GAAD,CACEyD,MAAOsF,EACPT,SAAUU,IAEZ,kBAAC,GAAD,CACEd,UAAWA,EAAUe,QACrB1E,QAASA,EACT4D,UAjBR,SAAmBhJ,EAAYsE,GAC7BmF,EAAW,MAAKrE,EAAN,eAAgBpF,EAAKsE,SAmB7B,kBAAC8B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIW,QAAQ,WAAWb,UAAWT,EAAenF,SAC9D,kBAACR,EAAA,EAAD,CACE0G,QAAQ,WACRxG,MAAM,YACNkG,UAAWT,EAAe9E,cAC1BZ,QAASqJ,GAJX,sBAQA,kBAACtJ,EAAA,EAAD,CACE0G,QAAQ,YACRxG,MAAM,UACNkG,UAAWT,EAAe9E,cAC1BZ,QAAS,WACPyF,EAAW,CACTxE,MAAOA,EAAM0I,QACbC,UAAW,CACT3E,UACAuE,QAASC,OATjB,wBAxBG,M,oBC3NLI,GAAoC,CAAE5E,QAAS,IAE9C,SAAS6E,KACd,OAAOC,KAAMC,IAAI,WAAaH,GAGzB,SAASI,GAAWjG,GACzB+F,KAAMG,IAAI,SAAUlG,GCatB,IAAMoD,GAAYhH,aAAW,kBAC3BE,YAAa,CACX6J,OAAQ,CACNC,WAAY,2BACZC,SAAU,GACV9B,QAAS,cAET+B,YAAa,YACb,UAAW,CACTA,YAAa,aAEfC,YAAa,QACbC,YAAa,EACbC,aAAc,EACdC,UAAW,IACXC,UAAW,SAEX,QAAS,CACPC,OAAQ,iBAqBHC,GAAwC,SAACrF,GAA4B,IACxE4D,EAAqC5D,EAArC4D,UAAWC,EAA0B7D,EAA1B6D,WAAYyB,EAActF,EAAdsF,UACzBpF,EAAiBvF,IACjBqH,EAAUJ,KACV2D,EAAYxB,iBAAsBH,EAAU2B,WAC5CC,EAAgBzB,iBAAqCH,EAAUpF,OAAOiB,SAAW,IALR,EAMtDU,oBAAyB,WAChD,OAtBiB,SAAC1E,EAAuBwI,GAC3C,IAAIwB,EAA8BhK,EAWlC,OAVI8C,GAAiB0F,EAAe,mCAClCwB,EAAcA,EAAYC,QAAO,SAACpJ,GAChC,OAAQ,CAAC,SAAK,KAAKU,SAASV,EAAKZ,QAAQ,GAAG,QAG5C6C,GAAiB0F,EAAe,+BAClCwB,EAAcA,EAAYC,QAAO,SAACpJ,GAChC,OAAQ,CAAC,SAAK,KAAKU,SAASV,EAAKZ,QAAQ,GAAG,QAGzC+J,EAUEE,CAAa/B,EAAUnI,MAAOmI,EAAUpF,OAAOwF,SAAW,OAD5D4B,EANwE,oBAU/E,OAAK5F,EAAMQ,KAIT,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWT,EAAe/E,WACxC,kBAACsF,EAAA,EAAD,CACEG,MAAI,EACJC,GAAI,GACJF,UAAWT,EAAehF,MAE1B,yBACEyF,UAAWqB,EAAQ2C,OACnBkB,cAAe,WACb,IAAMC,EAAYC,OAAOC,eACzB,GAAKF,EAAL,CAEA,IAAMG,EAAUC,SAASC,eAAe,UACxC,GAAKF,EAAL,CAEA,IAAMG,EAAQF,SAASG,cACvBD,EAAME,WAAWL,GACjBH,EAAUS,kBACVT,EAAUU,SAASJ,MAErB/L,GAAG,UAEFuL,EAAe3H,KAAI,SAAC3B,EAAoBmK,GAAyB,IACxDvH,EAAsB5C,EAAtB4C,SAAUxD,EAAYY,EAAZZ,QACZoB,EAAS0I,EAAcrB,QAAQjF,GACrC,OAAKpC,EAAO2F,QAGV,uBACEhE,IAAKgI,EACL9D,MAAO,CACLlI,MAAOqC,EAAOrC,QAHlB,WAMOqC,EAAOwG,YANd,MAOG5H,EAAQuC,KAAI,SAACyI,EAAqBC,GAEjC,OAD8B,IAAdA,EAAkB,GAAK,CAAC,wBAAIlI,IAAG,aAAQkI,OACxCC,OAAO,CAAC,0BAAMnI,IAAKkI,GAAYD,SAX3C,UAkBf,kBAACjG,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIW,QAAQ,WAAWb,UAAWT,EAAenF,SAC9D,kBAACR,EAAA,EAAD,CACE0G,QAAQ,WACRxG,MAAM,YACNkG,UAAWT,EAAe9E,cAC1BZ,QAAS,WACPiK,GAAWc,EAAUpB,SACrBN,MANJ,sBAWA,kBAACtJ,EAAA,EAAD,CACE0G,QAAQ,YACRN,UAAWT,EAAe9E,cAC1BuH,MAAO,CAAEG,gBAAiB,WAC1BtI,QAAS8K,GAJX,8BA3DG,MC8BIuB,GAzEG,SAChB7G,GAC+B,IACvB8G,EAAwE9G,EAAxE8G,QAAgBC,EAAwD/G,EAA/DgH,MAAcC,EAAiDjH,EAAjDiH,QAAgBC,EAAiClH,EAAxCmH,MAAcC,EAA0BpH,EAA1BoH,QAAgBC,EAAUrH,EAAjBsH,MADjC,EAGAnH,mBAAiB,GAHjB,mBAGvBoH,EAHuB,KAGdC,EAHc,OAIMrH,mBAA0B,IAJhC,mBAIvBsH,EAJuB,KAIXC,EAJW,KAMxBC,EAAgB,WACpBH,EAAWD,EAAU,GACrBG,EAAc,CACZZ,OAQJ,OAJyB,GAArBW,EAAW5L,QACb8L,IAIA,kBAAClH,EAAA,EAAD,CAAMC,WAAS,EAACG,GAAI,IACA,MAAjB4G,EAAW,GAAa,KACvB,kBAACV,EAAD,CACEtI,IAAG,UAAK8I,EAAL,MACH/G,KAA2B,GAArBiH,EAAW5L,OACjB+H,UAAW6D,EAAW,GACtBxH,WAAY,SAACpC,GACX6J,EAAc,CACZD,EAAW,GACXR,EAAQpJ,QAME,MAAjB4J,EAAW,GAAa,KACvB,kBAACP,EAAD,CACEzI,IAAG,UAAK8I,EAAL,MACH/G,KAA2B,GAArBiH,EAAW5L,OACjB+H,UAAW6D,EAAW,GACtB5D,WAAY,WACV6D,EAAc,CACZD,EAAW,MAGfxH,WAAY,SAACpC,GACX6J,EAAc,CACZD,EAAW,GACXA,EAAW,GACXL,EAAQvJ,QAME,MAAjB4J,EAAW,GAAa,KACvB,kBAACJ,EAAD,CACE5I,IAAG,UAAK8I,EAAL,MACH/G,KAA2B,GAArBiH,EAAW5L,OACjB+H,UAAW6D,EAAW,GACtB5D,WAAY,WACV6D,EAAc,CACZD,EAAW,GACXA,EAAW,MAGfnC,UAAWqC,MCzEfC,GAAkBhN,aAAW,kBACjCE,YAAa,CACX+M,KAAM,CACJC,YAAa,GACbhF,gBAAiB,SAEnBiF,eAAgB,CACdC,KAAM,YAERC,YAAa,CACXC,OAAQ,GACR7M,MAAO,GACP8M,KAAM,cASNC,GAAgC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QACjCrG,EAAU4F,KAChB,OACE,kBAACU,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAI,OAAOC,IAAI,8BAA8BhI,UAAWqB,EAAQ6F,OACxE,kBAACe,EAAA,EAAD,CAAY3H,QAAQ,KAAKN,UAAWqB,EAAQ+F,gBAA5C,sDAGA,kBAACc,EAAA,EAAD,CACEC,aAAW,SACXC,KAAMV,EACN9G,OAAO,SACPyH,IAAI,uBAEJ,kBAAC,IAAD,CACEC,IAAKC,IAAWD,IAChBtI,UAAWqB,EAAQiG,kBAazBkB,GAA4B,SAACnJ,GACjC,OACE,kBAAC,GAAD,CAOE8G,QAAS,iBAA4B,IACrCE,MAAOjH,GACPkH,QAAS,SAACpJ,GACR,IACMuL,EPnDP,SAAiBC,EAAsBC,GAA8C,IAClF7J,EAAmB4J,EAAnB5J,QAAShE,EAAU4N,EAAV5N,MACXuD,EAA8CuK,IAAMD,EAAc7J,SAAW,IAFM,uBAGzF,YAAqBA,EAArB,+CAA8B,CAAC,IAApB3C,EAAmB,QACxBwC,EAAeP,GAAsBC,EAAelC,EAAO8C,cAC1DN,IACHA,EAAe,CACbmD,SAAS,EACTa,YAAaxG,EAAOF,KACpBnC,MAAO0E,GAA2BL,GAAcE,KANxB,2BAS5B,YAAuBlC,EAAO8C,aAA9B,+CAA4C,CAC1CZ,EAD0C,SAChBM,GAVA,oFAH2D,kFAgBzF,MAAO,CACL7D,QACA2H,UAAW3D,EAAQxB,KAAI,SAACnB,GAAD,OAA4BA,EAAOoC,YAC1DsK,WAAW,MACNF,EADK,CAER7J,QAAST,KO8BgByK,CAAQ5L,EADhByG,MAEf,MAAO,CACL7I,MAAO2N,EAAe3N,MACtB2H,UAAWgG,EAAehG,UAC1B5E,OAAQ4K,EAAeI,aAG3BrC,MAAOxD,GACPyD,QAAS,SAACvJ,GACR,IAAM0H,EAAYjB,KAElB,OADAG,GAAW5G,EAAOuG,WACX,CACL3I,MAAOoC,EAAOpC,MACd+C,OAAQX,EAAOuG,UACfmB,cAGJ+B,MAAOjC,MAKPqE,GAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cAoBGE,GAfO,WACpB,OACE,kBAACC,EAAA,EAAD,CAAeP,MAAOA,IACpB,yBAAK/I,UAAU,QACb,kBAAC,GAAD,CACE0H,QAAQ,6CAEV,kBAAClN,EAAA,EAAD,CAAW+O,SAAS,KAAKvJ,UAAU,kBACjC,kBAAC,GAAD,UCpHUwJ,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASvO,MACvB,2DCbNwO,IAASC,OAAO,kBAAC,GAAD,MAASrE,SAASC,eAAe,SDoI3C,kBAAmBqE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c7bd46e.chunk.js","sourcesContent":["import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport interface AlertDialogControl {\n  open: boolean;\n  body?: React.ReactNode;\n}\n\ninterface AlertDialogProps extends AlertDialogControl {\n  onClose: () => void;\n}\n\nconst AlertDialog: React.FC<AlertDialogProps> = ({ open, onClose, body }: AlertDialogProps) => {\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle>出错啦</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {body}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\" autoFocus>\n            好的\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AlertDialog;","import { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\n\nexport const useStepperStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    Control: {\n      display: 'flex',\n      marginTop: 20,\n    },\n    Body: {\n    },\n    Container: {\n    },\n    ControlButton: {\n      width: 100,\n      marginLeft: 10,\n    }\n  }),\n);","import compact from 'lodash/compact';\nimport trim from 'lodash/trim';\nimport flow from 'lodash/flow';\n\nexport interface ParsedPlayer {\n  name: string;\n  number?: string;\n  title?: string;\n}\n\nexport interface ParsedLine {\n  time?: string;\n  player: ParsedPlayer;\n  content: string[];\n}\n\nexport interface ParseResult {\n  logLines: ParsedLine[];\n}\n\ninterface ParsedHeader {\n  player: ParsedPlayer;\n  time?: string;\n}\n\ntype HeaderParser = (line: string) => ParsedHeader | null;\ntype LogLineConverter = (logLine: ParsedLine) => ParsedLine | null;\n\ninterface LogConfig {\n  headerParser: HeaderParser;\n  logLineConverter: LogLineConverter;\n}\n\nfunction removeSystemTextConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n  const linesToRemove: number[] = [];\n  for (let i = 0; i < lines.length - 2; i++) {\n    const withdrawParser = /^.*撤回了一条消息( 重新编辑)?$/;\n    const commonFriendsParser = /^你和.*有\\d+个共同好友，点击添加好友。$/;\n    if (lines[i] === '' && (\n      lines[i+1].match(withdrawParser) ||\n      lines[i+1].match(commonFriendsParser)\n    )) {\n      linesToRemove.push(i);\n      linesToRemove.push(i+1);\n      i++;\n    }\n  }\n  linesToRemove.reverse();\n  for (const i of linesToRemove) {\n    lines.splice(i, 1);\n  }\n  return logLine;\n}\n\nfunction defaultConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n  while(lines.length > 0 && lines[0].trim() === '') {\n    lines.splice(0, 1);\n  }\n  while(lines.length > 0 && lines[lines.length-1].trim() === '') {\n    lines.splice(lines.length-1, 1);\n  }\n  if (lines.length === 0)\n    return null;\n  return logLine;\n}\n\n// Export from log\n// E.g. \"2019-09-23 8:43:38 PM 骰娘-Roll100(872001750)\"\nconst exportFromLog: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regDateName = /(\\d{4}-\\d{2}-\\d{2} \\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM))?) (.*?)/;\n    const regNumber = /(\\(\\d+\\)|<.+@.+\\..+>)/;\n    const regHeader = new RegExp(`^${regDateName.source}${regNumber.source}$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, time, name, number] = matches;\n    return {\n      player: {\n        name,\n        number: trim(number, '()<>'),\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    if (['10000', '1000000'].includes(logLine.player.number || ''))\n      return null;\n    return defaultConverter(logLine);\n  },\n};\n\n// Copy from sidewindow\n// E.g. \"【冒泡】无情的围观熊 2/14/2020 9:16:13 PM\"\nconst copyFromSideWindow: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(?:【(.{1,6})】)?(.*?) (\\d{1,4}\\/\\d{1,2}\\/\\d{1,4} \\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM))?)$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from chat\n// E.g. \"【煤油】丧 丧 熊 9:59:54 PM\"\nconst copyFromChat: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(?:【(.{1,6})】)?(.*) (\\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM)))?$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from mobile\n// E.g. \"a dark ideation  23:50:40\"\nconst copyFromMobile: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(.*?)  (\\d{1,2}:\\d{2}:\\d{2}) *$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, name, time] = matches;\n    return {\n      player: {\n        name,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return defaultConverter(logLine);\n  },\n};\n\nexport function parseChat(data: string): ParseResult {\n  const logLines: ParsedLine[] = [];\n  let firstLogConfig: LogConfig | undefined = undefined;\n  for (const line of data.split('\\n')) {\n    const parsedHeader = ((): ParsedHeader | null => {\n      if (firstLogConfig)\n        return firstLogConfig.headerParser(line);\n      for (const logConfig of [copyFromMobile, exportFromLog, copyFromSideWindow, copyFromChat]) {\n        const result = logConfig.headerParser(line);\n        if (result) {\n          firstLogConfig = logConfig;\n          return result;\n        }\n      }\n      return null;\n    })();\n    if (parsedHeader) {\n      logLines.push({\n        ...parsedHeader,\n        content: [],\n      });\n    } else {\n      if (firstLogConfig) {\n        const currentLogLine: ParsedLine | undefined = logLines[logLines.length - 1];\n        // Content after a recognizable header\n        if (currentLogLine)\n          currentLogLine.content.push(line);\n      } else {\n        // Unrecognizable content before the first header\n        // Do nothing\n      }\n    }\n  }\n  if (!firstLogConfig)\n    return { logLines: [] };\n\n  const convertedLogLines = compact(\n    logLines.map(firstLogConfig.logLineConverter)\n  );\n  return { logLines: convertedLogLines };\n}","import values from 'lodash/values';\n\nimport { ParseResult, ParsedPlayer } from './parser_chat';\nimport {\n  GroupResult,\n  AnalysedLine,\n  AnalysedPlayer,\n} from 'common';\n\nfunction getPlayerIdGroup(player: ParsedPlayer): string[] {\n  const ids: string[] = [];\n  if (player.number)\n    ids.push(`qq:${player.number}`);\n  ids.push(`name:${player.name}`);\n  return ids;\n}\n\nexport function groupByPlayers(result: ParseResult): GroupResult {\n  const lines: AnalysedLine[] = [];\n  const players: Record<string, AnalysedPlayer> = {};\n  for (const parsedLine of result.logLines) {\n    const { player, time, content } = parsedLine;\n    const playerIdGroup = getPlayerIdGroup(player);\n    const majorPlayerId = playerIdGroup[0];\n    if (!players[majorPlayerId])\n      players[majorPlayerId] = {\n        playerId: majorPlayerId,\n        allPlayerIds: playerIdGroup,\n        name: player.name,\n        number: player.number,\n      };\n    lines.push({\n      playerId: majorPlayerId,\n      time,\n      title: player.title,\n      content,\n    });\n  }\n  return {\n    lines,\n    players: values(players),\n  };\n}\n","import Color from 'color';\n\nexport interface GroupResult {\n  players: AnalysedPlayer[];\n  lines: AnalysedLine[];\n};\n\nexport interface AnalysedLine {\n  playerId: string;\n  time?: string;\n  title?: string;\n  content: string[];\n}\n\nexport interface AnalysedPlayer {\n  playerId: string;\n  allPlayerIds: string[];\n  number?: string;\n  name: string;\n}\n\nexport interface AnalyseResult {\n  lines: AnalysedLine[];\n  playerIds: string[];\n  nextConfig: Configuration;\n}\n\nexport interface ConfigPlayer {\n  displayName: string;\n  enabled: boolean;\n  color: string;\n}\n\nexport interface GeneralConfig {\n  removeLinesStartedWithBracket?: boolean;\n  removeLinesStartedWithDot?: boolean;\n}\n\nexport const defaultGeneralConfig: Required<GeneralConfig> = {\n  removeLinesStartedWithBracket: false,\n  removeLinesStartedWithDot: false,\n};\n\nexport const getGeneralConfig = <K extends keyof GeneralConfig>(config: GeneralConfig, key: K): GeneralConfig[K] => {\n  return config[key] || defaultGeneralConfig[key];\n};\n\nexport interface Configuration {\n  players?: Record<string, ConfigPlayer>;\n  general?: GeneralConfig;\n}\n\nexport interface DescribedColor {\n  value: string;\n  name?: string;\n  isLight: boolean;\n}\n\nexport const presetDescribedColors: DescribedColor[] = [\n  { value: \"black\", name: \"黑色\" },\n  { value: \"silver\", name: \"灰色\" },\n  { value: \"red\", name: \"红色\" },\n  { value: \"green\", name: \"绿色\" },\n  { value: \"orange\", name: \"橘色\" },\n  { value: \"purple\", name: \"紫色\" },\n  { value: \"teal\", name: \"蓝绿\" },\n  { value: \"fuchsia\", name: \"桃红\" },\n  { value: \"yellow\", name: \"黄色\" },\n  { value: \"beige\", name: \"米色\" },\n  { value: \"brown\", name: \"棕色\" },\n  { value: \"navy\", name: \"深蓝\" },\n  { value: \"maroon\", name: \"紫红\" },\n  { value: \"limegreen\", name: \"莱姆\" },\n  { value: \"white\", name: \"白色\" },\n  { value: \"brown\", name: \"蓝色\" },\n  { value: \"pink\", name: \"粉红\" },\n].map(({ value, ...others }) => ({\n  ...others,\n  value,\n  isLight: Color(value).isLight(),\n}));","import forEach from 'lodash/forEach';\nimport clone from 'lodash/clone';\nimport {\n  Configuration,\n  AnalysedPlayer,\n  AnalyseResult,\n  ConfigPlayer,\n  presetDescribedColors,\n  DescribedColor,\n  GroupResult,\n} from 'common';\n\nconst presetColors: string[] = presetDescribedColors.map(({ value }: DescribedColor) => value);\n\nfunction findFirstPlayerConfig(\n  configPlayers: Record<string, ConfigPlayer>,\n  playerIdGroup: string[],\n): ConfigPlayer | null {\n  for (const playerId of playerIdGroup) {\n    if (configPlayers[playerId])\n      return configPlayers[playerId];\n  }\n  return null;\n}\n\nfunction findFirstUnusedPresetColor(\n  presetColors: string[],\n  configPlayers: Record<string, ConfigPlayer>,\n): string {\n  const existingColors: Record<string, boolean> = {};\n  forEach(configPlayers, (configPlayer: ConfigPlayer) => {\n    existingColors[configPlayer.color] = true;\n  });\n  return presetColors.find((color: string) => !existingColors[color]) || 'black';\n}\n\nexport function analyse(grouped: GroupResult, currentConfig: Configuration): AnalyseResult {\n  const { players, lines } = grouped;\n  const configPlayers: Record<string, ConfigPlayer> = clone(currentConfig.players || {});\n  for (const player of players) {\n    let configPlayer = findFirstPlayerConfig(configPlayers, player.allPlayerIds);\n    if (!configPlayer) {\n      configPlayer = {\n        enabled: true,\n        displayName: player.name,\n        color: findFirstUnusedPresetColor(presetColors, configPlayers),\n      };\n    }\n    for (const playerId of player.allPlayerIds) {\n      configPlayers[playerId] = configPlayer;\n    }\n  };\n  return {\n    lines,\n    playerIds: players.map((player: AnalysedPlayer) => player.playerId),\n    nextConfig: {\n      ...currentConfig,\n      players: configPlayers,\n    },\n  };\n}","import { parseChat, ParseResult } from './parser_chat';\nimport { GroupResult } from 'common';\nimport { groupByPlayers } from './group';\n\nexport function parseAndGroup(source: string): GroupResult {\n  const parseResult: ParseResult = parseChat(source);\n  return groupByPlayers(parseResult);\n}\nexport { analyse } from './analyse';","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport AlertDialog, { AlertDialogControl } from './AlertDialog';\nimport { useStepperStyles } from './App-classes';\n\nimport { parseAndGroup } from 'parser';\nimport { GroupResult } from 'common';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface StepSourceInitState {\n}\n\nexport type StepSourceResult = GroupResult;\n\ninterface StepSourceProps {\n  initState: StepSourceInitState;\n  onNextStep: (result: StepSourceResult) => void;\n  show: boolean;\n}\n\nexport const StepSource: React.FC<StepSourceProps> = (props: StepSourceProps) => {\n  const { onNextStep } = props;\n  const stepperClasses = useStepperStyles();\n  const [text, setText] = useState<string>('');\n\n  const [alertControl, setAlertControl] = useState<AlertDialogControl>({\n    open: false,\n  });\n\n  if (!props.show)\n    return null;\n\n  function processResult(text: string): GroupResult | undefined {\n    const groupResult = parseAndGroup(text);\n    if (groupResult.players.length === 0 || groupResult.lines.length === 0) {\n      setAlertControl({\n        open: true,\n        body: '无法从这段记录中找到可识别的部分！请检查后再试一次吧！',\n      });\n      return undefined;\n    }\n    return groupResult;\n  }\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"原文\"\n          placeholder=\"把原文粘贴到这里，然后点击下一步。\"\n          variant=\"outlined\"\n          multiline\n          fullWidth\n          rows={10}\n          className='Source-textfield'\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n            setText(event.target.value);\n          }}\n          value={text}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={text.length < 5}\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            const result = processResult(text);\n            if (result) {\n              onNextStep(result);\n            }\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n      <AlertDialog\n        onClose={(): void => setAlertControl({\n          ...alertControl,\n          open: false,\n        })}\n        {...alertControl}\n      />\n    </Grid>\n  );\n};","import React, { useState, useRef } from 'react';\nimport Color from 'color';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Select from '@material-ui/core/Select';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport { useStepperStyles } from './App-classes';\nimport { getGeneralConfig, Configuration, AnalysedLine, DescribedColor, ConfigPlayer, presetDescribedColors, GeneralConfig } from 'common';\n\nexport interface StepConfigInitState {\n  lines: AnalysedLine[];\n  playerIds: string[];\n  config: Configuration;\n}\n\nexport interface StepConfigResult {\n  lines: AnalysedLine[];\n  newConfig: Configuration;\n}\n\ninterface PlayerConfigProps {\n  name: string;\n  color: string;\n  enabled: boolean;\n  setName: (value: string) => void;\n  setColor: (value: string) => void;\n  setEnabled: (value: boolean) => void;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    PlayerConfig: {\n    },\n    Center: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n  }),\n);\n\nconst PlayerConfig: React.FC<PlayerConfigProps> = (props: PlayerConfigProps) => {\n  const classes = useStyles();\n  return (\n    <Grid item xs={6}>\n      <Grid container>\n        <Grid item xs={8}>\n          <TextField\n            defaultValue={props.name}\n            variant=\"outlined\"\n            fullWidth\n            onBlur={(event: React.FocusEvent<HTMLInputElement>): void => {\n              props.setName(event.target.value || '');\n            }}\n          />\n        </Grid>\n        <Grid item xs={4} className={classes.Center}>\n          <Grid container>\n            <FormGroup row className={classes.Center}>\n              <FormControl>\n                <Switch\n                  checked={props.enabled}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void => {\n                    props.setEnabled(checked);\n                  }}\n                  value=\"primary\"\n                />\n              </FormControl>\n              <FormControl style={props.enabled ? {} : { visibility: 'hidden' }}>\n                <Select\n                  style={{\n                    backgroundColor: props.color,\n                    color: Color(props.color).isLight() ? 'black' : 'white',\n                    padding: 4,\n                  }}\n                  native\n                  value={props.color}\n                  onChange={(event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n                    props.setColor(event.target.value as string);\n                  }}\n                >\n                  {presetDescribedColors.map((describedColor: DescribedColor): React.ReactNode => {\n                    const { value, name, isLight } = describedColor;\n                    return (\n                      <option\n                        key={value}\n                        value={value}\n                        style={{\n                          backgroundColor: value,\n                          color: isLight ? 'black' : 'white',\n                        }}\n                      >\n                        {name || value}\n                      </option>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\ninterface SourceInputProps {\n  initState: StepConfigInitState;\n  onPrevStep: () => void;\n  onNextStep: (result: StepConfigResult) => void;\n  show: boolean;\n}\n\ninterface StepConfigPlayersProps {\n  playerIds: string[];\n  players: Record<string, ConfigPlayer>;\n  setPlayer: (id: string, value: ConfigPlayer) => void;\n}\n\nconst StepConfigPlayers: React.FC<StepConfigPlayersProps> = (props: StepConfigPlayersProps) => {\n  const { playerIds, players, setPlayer } = props;\n  return (\n    <Grid container>\n      {playerIds.map((playerId: string) => {\n        const player = players[playerId];\n        return (\n          <PlayerConfig\n            key={playerId}\n            name={player.displayName}\n            setName={(value: string): void => {\n              setPlayer(playerId, {\n                ...player,\n                displayName: value,\n              });\n            }}\n            enabled={player.enabled}\n            setEnabled={(value: boolean): void => {\n              setPlayer(playerId, {\n                ...player,\n                enabled: value,\n              });\n            }}\n            color={player.color}\n            setColor={(value: string): void => {\n              setPlayer(playerId, {\n                ...player,\n                color: value,\n              });\n            }}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n\ninterface StepConfigGeneralProps {\n  value: GeneralConfig;\n  setValue: (value: GeneralConfig) => void;\n}\n\nconst StepConfigGeneral: React.FC<StepConfigGeneralProps> = (props: StepConfigGeneralProps) => {\n  const { value, setValue } = props;\n\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={getGeneralConfig(value, 'removeLinesStartedWithBracket')}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithBracket: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以（开头的行\"\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={getGeneralConfig(value, 'removeLinesStartedWithDot')}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithDot: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以。开头的行\"\n      />\n    </FormGroup>\n  );\n};\n\nexport const StepConfig: React.FC<SourceInputProps> = (props: SourceInputProps) => {\n  const { initState, onPrevStep, onNextStep } = props;\n  const stepperClasses = useStepperStyles();\n  const [players, setPlayers] = useState<Record<string, ConfigPlayer>>(\n    () => initState.config.players || {},\n  );\n  const playerIds = useRef<string[]>(initState.playerIds);\n  const [generalConfig, setGeneralConfig] = useState<GeneralConfig>(\n    () => initState.config.general || {},\n  );\n  const lines = useRef<AnalysedLine[]>(initState.lines);\n  function setPlayer(id: string, value: ConfigPlayer): void {\n    setPlayers({ ...players, [id]: value });\n  }\n\n  if (!props.show)\n    return null;\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <StepConfigGeneral\n          value={generalConfig}\n          setValue={setGeneralConfig}\n        />\n        <StepConfigPlayers\n          playerIds={playerIds.current}\n          players={players}\n          setPlayer={setPlayer}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={onPrevStep}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            onNextStep({\n              lines: lines.current,\n              newConfig: {\n                players,\n                general: generalConfig,\n              },\n            });\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};","import Store from 'store';\nimport { Configuration } from 'common';\n\nconst emptyConfiguration: Configuration = { players: {} };\n\nexport function loadConfig(): Configuration {\n  return Store.get('config') || emptyConfiguration;\n}\n\nexport function saveConfig(config: Configuration): void {\n  Store.set('config', config);\n}","import React, { useRef, useState } from 'react';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport { useStepperStyles } from './App-classes';\nimport { AnalysedLine, Configuration, getGeneralConfig, GeneralConfig, ConfigPlayer } from 'common';\nimport { saveConfig } from './storage';\n\nexport interface StepResultInitState {\n  lines: AnalysedLine[];\n  config: Configuration;\n  oldConfig: Configuration;\n}\n\ninterface StepResultProps {\n  initState: StepResultInitState;\n  onPrevStep: () => void;\n  onRestart: () => void;\n  show: boolean;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    Output: {\n      fontFamily: '微软雅黑',\n      fontSize: 14,\n      padding: '18.5px 14px',\n\n      borderColor: '#0000003b',\n      '&:hover': {\n        borderColor: '#000000de',\n      },\n      borderStyle: 'solid' ,\n      borderWidth: 1,\n      borderRadius: 4,\n      maxHeight: 200,\n      overflowY: 'scroll',\n\n      '& > p': {\n        margin: '0.5em 0',\n      },\n    },\n  }),\n);\n\nconst processLines = (lines: AnalysedLine[], generalConfig: GeneralConfig): AnalysedLine[] => {\n  let resultLines: AnalysedLine[] = lines;\n  if (getGeneralConfig(generalConfig, 'removeLinesStartedWithBracket')) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['（', '('].includes(line.content[0][0]);\n    });\n  }\n  if (getGeneralConfig(generalConfig, 'removeLinesStartedWithDot')) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['。', '.'].includes(line.content[0][0]);\n    });\n  }\n  return resultLines;\n};\n\nexport const StepResult: React.FC<StepResultProps> = (props: StepResultProps) => {\n  const { initState, onPrevStep, onRestart } = props;\n  const stepperClasses = useStepperStyles();\n  const classes = useStyles();\n  const oldConfig = useRef<Configuration>(initState.oldConfig);\n  const playersConfig = useRef<Record<string, ConfigPlayer>>(initState.config.players || {});\n  const [processedLines] = useState<AnalysedLine[]>(() => {\n    return processLines(initState.lines, initState.config.general || {});\n  });\n\n  if (!props.show)\n    return null;\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid\n        item\n        xs={12}\n        className={stepperClasses.Body}\n      >\n        <div\n          className={classes.Output}\n          onDoubleClick={(): void => {\n            const selection = window.getSelection();\n            if (!selection)\n              return;\n            const element = document.getElementById('result');\n            if (!element)\n              return;\n            const range = document.createRange();\n            range.selectNode(element);\n            selection.removeAllRanges();\n            selection.addRange(range);\n          }}\n          id='result'\n        >\n          {processedLines.map((line: AnalysedLine, paragraphId: number) => {\n            const { playerId, content } = line;\n            const player = playersConfig.current[playerId];\n            if (!player.enabled)\n              return null;\n            return (\n              <p\n                key={paragraphId}\n                style={{\n                  color: player.color,\n                }}\n              >\n                {`<${player.displayName}> `}\n                {content.map((contentLine: string, contentId: number) => {\n                  const newLine = contentId === 0 ? [] : [<br key={`br-${contentId}`}/>];\n                  return newLine.concat([<span key={contentId}>{contentLine}</span>]);\n                })}\n              </p>\n            );\n          })}\n        </div>\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            saveConfig(oldConfig.current);\n            onPrevStep();\n          }}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          className={stepperClasses.ControlButton}\n          style={{ backgroundColor: '#d4d45f' }}\n          onClick={onRestart}\n        >\n          再做一团\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};","import React, { useState } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n\ninterface BaseStep<InArg> {\n  show: boolean;\n  initState: InArg;\n}\n\ninterface WithOutArg<OutArg> {\n  onNextStep: (result: OutArg) => void;\n}\n\ninterface WithPrevStep {\n  onPrevStep: () => void;\n}\n\ninterface WithRestart {\n  onRestart: () => void;\n}\n\ninterface MultiStepProps<I1, O1, I2, O2, I3> {\n  onInit1: () => I1;\n  step1: React.ComponentType<BaseStep<I1> & WithOutArg<O1>>;\n  onInit2: (o: O1) => I2;\n  step2: React.ComponentType<BaseStep<I2> & WithOutArg<O2> & WithPrevStep>;\n  onInit3: (o: O2) => I3;\n  step3: React.ComponentType<BaseStep<I3> & WithPrevStep & WithRestart>;\n}\n\nconst MultiStep = <I1, O1, I2, O2, I3>(\n  props: MultiStepProps<I1, O1, I2, O2, I3>,\n): React.ReactElement | null => {\n  const { onInit1, step1: Step1, onInit2, step2: Step2, onInit3, step3: Step3 } = props;\n  // `session` is used to refresh steps (mostly step 1) on restart.\n  const [session, setSession] = useState<number>(0);\n  const [initStates, setInitStates] = useState<[I1?, I2?, I3?]>([]);\n\n  const handleRestart = (): void => {\n    setSession(session + 1);\n    setInitStates([\n      onInit1(),\n    ]);\n  };\n\n  if (initStates.length == 0) {\n    handleRestart();\n  }\n\n  return (\n    <Grid container xs={12}>\n      {initStates[0] == null ? null : (\n        <Step1\n          key={`${session}-1`}\n          show={initStates.length == 1}\n          initState={initStates[0]}\n          onNextStep={(result: O1): void => {\n            setInitStates([\n              initStates[0],\n              onInit2(result),\n            ]);\n          }}\n        />\n      )}\n\n      {initStates[1] == null ? null : (\n        <Step2\n          key={`${session}-2`}\n          show={initStates.length == 2}\n          initState={initStates[1]}\n          onPrevStep={(): void => {\n            setInitStates([\n              initStates[0],\n            ]);\n          }}\n          onNextStep={(result: O2): void => {\n            setInitStates([\n              initStates[0],\n              initStates[1],\n              onInit3(result),\n            ]);\n          }}\n        />\n      )}\n\n      {initStates[2] == null ? null : (\n        <Step3\n          key={`${session}-3`}\n          show={initStates.length == 3}\n          initState={initStates[2]}\n          onPrevStep={(): void => {\n            setInitStates([\n              initStates[0],\n              initStates[1],\n            ]);\n          }}\n          onRestart={handleRestart}\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport default MultiStep;","import React from 'react';\nimport SVGInline from 'react-svg-inline';\n\nimport GithubIcon from 'simple-icons/icons/github';\n\nimport { makeStyles, createStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport './index.css';\nimport './App.css';\nimport { StepSource, StepSourceResult, StepSourceInitState } from './StepSource';\nimport { StepConfig, StepConfigResult, StepConfigInitState } from './StepConfig';\nimport { StepResult, StepResultInitState } from './StepResult';\nimport MultiStep from './MultiStep';\nimport { saveConfig, loadConfig } from './storage';\nimport { analyse } from 'parser';\n\nconst useHeaderStyles = makeStyles(() =>\n  createStyles({\n    logo: {\n      marginRight: 15,\n      backgroundColor: 'white',\n    },\n    horizontalFill: {\n      flex: '1 0 auto',\n    },\n    toolbarIcon: {\n      height: 24,\n      width: 24,\n      fill: 'white',\n    },\n  }),\n);\n\ninterface HeaderProps {\n  repoUrl: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ repoUrl }: HeaderProps) => {\n  const classes = useHeaderStyles();\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <Avatar alt=\"Logo\" src=\"/android-chrome-512x512.png\" className={classes.logo} />\n        <Typography variant=\"h6\" className={classes.horizontalFill}>\n          DK的跑团记录着色器\n        </Typography>\n        <IconButton\n          aria-label=\"GitHub\"\n          href={repoUrl}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <SVGInline\n            svg={GithubIcon.svg}\n            className={classes.toolbarIcon}\n          />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface MainProps {\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Main: React.FC<MainProps> = (props: MainProps) => {\n  return (\n    <MultiStep<\n        StepSourceInitState,\n        StepSourceResult,\n        StepConfigInitState,\n        StepConfigResult,\n        StepResultInitState\n      >\n      onInit1={(): StepSourceInitState => ({})}\n      step1={StepSource}\n      onInit2={(result: StepSourceResult): StepConfigInitState => {\n        const config = loadConfig();\n        const analysedResult = analyse(result, config);\n        return {\n          lines: analysedResult.lines,\n          playerIds: analysedResult.playerIds,\n          config: analysedResult.nextConfig,\n        };\n      }}\n      step2={StepConfig}\n      onInit3={(result: StepConfigResult): StepResultInitState => {\n        const oldConfig = loadConfig();\n        saveConfig(result.newConfig);\n        return {\n          lines: result.lines,\n          config: result.newConfig,\n          oldConfig,\n        };\n      }}\n      step3={StepResult}\n    />\n  );\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#795548',\n    },\n    secondary: {\n      main: '#00897b',\n    },\n  },\n});\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"root\">\n        <Header\n          repoUrl='https://github.com/dkwingsmt/log-painter'\n        />\n        <Container maxWidth='md' className='Body-container'>\n          <Main />\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'web';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}