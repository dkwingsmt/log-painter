{"version":3,"sources":["common.ts","parser/analyse.ts","parser/parser_chat.ts","web/App-classes.ts","web/StepSource.tsx","web/StepConfig.tsx","web/StepResult.tsx","web/App.tsx","parser/index.ts","serviceWorker.ts","index.tsx"],"names":["presetDescribedColors","value","name","map","isLight","Color","presetColors","getPlayerIdGroup","player","ids","number","push","findFirstPlayerConfig","configPlayers","playerIdGroup","playerId","findFirstUnusedPresetColor","existingColors","forEach","configPlayer","color","find","analyse","parsed","currentConfig","result","lines","players","logLines","parsedLine","time","content","majorPlayerId","allPlayerIds","title","values","groupByPlayers","clone","enabled","displayName","playerIds","nextConfig","removeSystemTextConverter","logLine","linesToRemove","i","length","match","reverse","splice","defaultConverter","trim","exportFromLog","headerParser","line","matches","exec","logLineConverter","includes","copyFromSideWindow","flow","copyFromChat","parseChat","data","firstLogConfig","undefined","parsedHeader","logConfig","currentLogLine","split","compact","useStepperStyles","makeStyles","_theme","createStyles","Control","display","marginTop","Body","Container","ControlButton","width","marginLeft","StepSource","props","getInitState","onNextStep","initText","text","stepperClasses","useState","setText","Grid","container","className","item","xs","TextField","id","label","placeholder","variant","multiline","fullWidth","rows","onChange","event","target","justify","Button","disabled","onClick","useStyles","PlayerConfig","Center","alignItems","classes","defaultValue","onBlur","setName","FormGroup","row","FormControl","Switch","checked","setEnabled","style","visibility","Select","backgroundColor","padding","native","setColor","describedColor","key","StepConfigPlayers","setPlayer","StepConfig","onPrevStep","initLines","config","useRef","setPlayers","newConfig","Output","fontFamily","fontSize","borderColor","borderStyle","borderWidth","borderRadius","maxHeight","overflowY","margin","StepResult","onRestart","onDoubleClick","selection","window","getSelection","element","document","getElementById","range","createRange","selectNode","removeAllRanges","addRange","paragraphId","contentLine","contentId","concat","Header","AppBar","position","Toolbar","Typography","emptyConfiguration","saveConfig","Store","set","AlertDialog","open","onClose","body","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Main","setError","step","setStep","sourceText","oldConfig","lastConvertResult","current","get","source","convertResult","App","errorMessage","setErrorMessage","maxWidth","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a47232f.chunk.js","sourcesContent":["import Color from 'color';\n\nexport interface AnalysedLine {\n  playerId: string;\n  time?: string;\n  title?: string;\n  content: string[];\n}\n\nexport interface AnalysedPlayer {\n  playerId: string;\n  allPlayerIds: string[];\n  number?: string;\n  name: string;\n}\n\nexport interface AnalyseResult {\n  lines: AnalysedLine[];\n  playerIds: string[];\n  nextConfig: Configuration;\n}\n\nexport interface ConfigPlayer {\n  playerId: string;\n  displayName: string;\n  enabled: boolean;\n  color: string;\n}\n\nexport interface Configuration {\n  players: Record<string, ConfigPlayer>;\n}\n\nexport interface DescribedColor {\n  value: string;\n  name?: string;\n  isLight: boolean;\n}\n\nexport const presetDescribedColors: DescribedColor[] = [\n  { value: \"black\", name: \"黑色\" },\n  { value: \"silver\", name: \"灰色\" },\n  { value: \"red\", name: \"红色\" },\n  { value: \"green\", name: \"绿色\" },\n  { value: \"orange\", name: \"橘色\" },\n  { value: \"purple\", name: \"紫色\" },\n  { value: \"teal\", name: \"蓝绿\" },\n  { value: \"fuchsia\", name: \"桃红\" },\n  { value: \"yellow\", name: \"黄色\" },\n  { value: \"beige\", name: \"米色\" },\n  { value: \"brown\", name: \"棕色\" },\n  { value: \"navy\", name: \"深蓝\" },\n  { value: \"maroon\", name: \"紫红\" },\n  { value: \"limegreen\", name: \"莱姆\" },\n  { value: \"white\", name: \"白色\" },\n  { value: \"brown\", name: \"蓝色\" },\n  { value: \"pink\", name: \"粉红\" },\n].map(({ value, ...others }) => ({\n  ...others,\n  value,\n  isLight: Color(value).isLight(),\n}));","import forEach from 'lodash/forEach';\nimport values from 'lodash/values';\nimport clone from 'lodash/clone';\nimport { ParseResult, ParsedPlayer } from './parser_chat';\nimport {\n  Configuration,\n  AnalysedLine,\n  AnalysedPlayer,\n  AnalyseResult,\n  ConfigPlayer,\n  presetDescribedColors,\n  DescribedColor,\n} from 'common';\n\ninterface GroupResult {\n  players: AnalysedPlayer[];\n  lines: AnalysedLine[];\n};\n\nconst presetColors: string[] = presetDescribedColors.map(({ value }: DescribedColor) => value);\n\nfunction getPlayerIdGroup(player: ParsedPlayer): string[] {\n  const ids: string[] = [];\n  if (player.number)\n    ids.push(`qq:${player.number}`);\n  ids.push(`name:${player.name}`);\n  return ids;\n}\n\nfunction groupByPlayers(result: ParseResult): GroupResult {\n  const lines: AnalysedLine[] = [];\n  const players: Record<string, AnalysedPlayer> = {};\n  for (const parsedLine of result.logLines) {\n    const { player, time, content } = parsedLine;\n    const playerIdGroup = getPlayerIdGroup(player);\n    const majorPlayerId = playerIdGroup[0];\n    if (!players[majorPlayerId])\n      players[majorPlayerId] = {\n        playerId: majorPlayerId,\n        allPlayerIds: playerIdGroup,\n        name: player.name,\n        number: player.number,\n      };\n    lines.push({\n      playerId: majorPlayerId,\n      time,\n      title: player.title,\n      content,\n    });\n  }\n  return {\n    lines,\n    players: values(players),\n  };\n}\n\nfunction findFirstPlayerConfig(\n  configPlayers: Record<string, ConfigPlayer>,\n  playerIdGroup: string[],\n): ConfigPlayer | null {\n  for (const playerId of playerIdGroup) {\n    if (configPlayers[playerId])\n      return configPlayers[playerId];\n  }\n  return null;\n}\n\nfunction findFirstUnusedPresetColor(\n  presetColors: string[],\n  configPlayers: Record<string, ConfigPlayer>,\n): string {\n  const existingColors: Record<string, boolean> = {};\n  forEach(configPlayers, (configPlayer: ConfigPlayer) => {\n    existingColors[configPlayer.color] = true;\n  });\n  return presetColors.find((color: string) => !existingColors[color]) || 'black';\n}\n\nexport function analyse(parsed: ParseResult, currentConfig: Configuration): AnalyseResult {\n  const { lines, players } = groupByPlayers(parsed);\n  const configPlayers: Record<string, ConfigPlayer> = clone(currentConfig.players);\n  for (const player of players) {\n    let configPlayer = findFirstPlayerConfig(configPlayers, player.allPlayerIds);\n    if (!configPlayer) {\n      configPlayer = {\n        enabled: true,\n        playerId: player.playerId,\n        displayName: player.name,\n        color: findFirstUnusedPresetColor(presetColors, configPlayers),\n      };\n    }\n    for (const playerId of player.allPlayerIds) {\n      configPlayers[playerId] = configPlayer;\n    }\n  };\n  return {\n    lines,\n    playerIds: players.map((player: AnalysedPlayer) => player.playerId),\n    nextConfig: {\n      players: configPlayers,\n    },\n  };\n}","import compact from 'lodash/compact';\nimport flow from 'lodash/flow';\n\nexport interface ParsedPlayer {\n  name: string;\n  number?: string;\n  title?: string;\n}\n\ninterface ParsedHeader {\n  player: ParsedPlayer;\n  time?: string;\n}\n\nexport interface ParsedLine {\n  time?: string;\n  player: ParsedPlayer;\n  content: string[];\n}\n\nexport interface ParseResult {\n  logLines: ParsedLine[];\n}\n\ntype HeaderParser = (line: string) => ParsedHeader | null;\ntype LogLineConverter = (logLine: ParsedLine) => ParsedLine | null;\n\ninterface LogConfig {\n  headerParser: HeaderParser;\n  logLineConverter: LogLineConverter;\n}\n\nfunction removeSystemTextConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n  const linesToRemove: number[] = [];\n  for (let i = 0; i < lines.length - 2; i++) {\n    const withdrawParser = /^.*撤回了一条消息$/;\n    const commonFriendsParser = /^你和.*有\\d+个共同好友，点击添加好友。$/;\n    if (lines[i] === '' && (\n      lines[i+1].match(withdrawParser) ||\n      lines[i+1].match(commonFriendsParser)\n    )) {\n      linesToRemove.push(i);\n      linesToRemove.push(i+1);\n      i++;\n    }\n  }\n  linesToRemove.reverse();\n  for (const i of linesToRemove) {\n    lines.splice(i, 1);\n  }\n  return logLine;\n}\n\nfunction defaultConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n  while(lines.length > 0 && lines[0].trim() === '') {\n    lines.splice(0, 1);\n  }\n  while(lines.length > 0 && lines[lines.length-1].trim() === '') {\n    lines.splice(lines.length-1, 1);\n  }\n  if (lines.length === 0)\n    return null;\n  return logLine;\n}\n\n// Export from log\n// E.g. \"2019-09-23 8:43:38 PM 骰娘-Roll100(872001750)\"\nconst exportFromLog: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(\\d{4}-\\d{2}-\\d{2} \\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM))?) ([^AMP]*?)\\((\\d+)\\)$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, time, name, number] = matches;\n    return {\n      player: {\n        name,\n        number,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    if (['10000', '1000000'].includes(logLine.player.number || ''))\n      return null;\n    return defaultConverter(logLine);\n  },\n};\n\n// Copy from sidewindow\n// E.g. \"【冒泡】无情的围观熊 2/14/2020 9:16:13 PM\"\nconst copyFromSideWindow: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(?:【(.{1,6})】)?(.*?) (\\d{1,4}\\/\\d{2}\\/\\d{1,4} \\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM))?)$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from chat\n// E.g. \"【煤油】丧 丧 熊 9:59:54 PM\"\nconst copyFromChat: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(?:【(.{1,6})】)?(.*) (\\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM)))?$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\nexport function parseChat(data: string): ParseResult {\n  const logLines: ParsedLine[] = [];\n  let firstLogConfig: LogConfig | undefined = undefined;\n  for (const line of data.split('\\n')) {\n    const parsedHeader = ((): ParsedHeader | null => {\n      if (firstLogConfig)\n        return firstLogConfig.headerParser(line);\n      for (const logConfig of [exportFromLog, copyFromSideWindow, copyFromChat]) {\n        const result = logConfig.headerParser(line);\n        if (result) {\n          firstLogConfig = logConfig;\n          return result;\n        }\n      }\n      return null;\n    })();\n    if (parsedHeader) {\n      logLines.push({\n        ...parsedHeader,\n        content: [],\n      });\n    } else {\n      if (firstLogConfig) {\n        const currentLogLine: ParsedLine | undefined = logLines[logLines.length - 1];\n        // Content after a recognizable header\n        if (currentLogLine)\n          currentLogLine.content.push(line);\n      } else {\n        // Unrecognizable content before the first header\n        // Do nothing\n      }\n    }\n  }\n  if (!firstLogConfig)\n    return { logLines: [] };\n\n  const convertedLogLines = compact(\n    logLines.map(firstLogConfig.logLineConverter)\n  );\n  return { logLines: convertedLogLines };\n}","import { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\n\nexport const useStepperStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    Control: {\n      display: 'flex',\n      marginTop: 20,\n    },\n    Body: {\n    },\n    Container: {\n    },\n    ControlButton: {\n      width: 100,\n      marginLeft: 10,\n    }\n  }),\n);","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport { useStepperStyles } from './App-classes';\n\nexport interface StepSourceInitState {\n  text: string;\n}\n\nexport interface StepSourceResult {\n  text: string;\n}\n\ninterface StepSourceProps {\n  getInitState: () => StepSourceInitState;\n  onNextStep: (result: StepSourceResult) => void;\n}\n\nexport const StepSource: React.FC<StepSourceProps> = (props: StepSourceProps) => {\n  const { getInitState, onNextStep } = props;\n  const { text: initText } = getInitState();\n  const stepperClasses = useStepperStyles();\n  const [text, setText] = useState<string>(initText);\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"原文\"\n          placeholder=\"把原文粘贴到这里，然后点击下一步。\"\n          variant=\"outlined\"\n          multiline\n          fullWidth\n          rows={10}\n          className='Source-textfield'\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n            setText(event.target.value);\n          }}\n          value={text}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={text.length < 5}\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            onNextStep({\n              text,\n            });\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};","import React, { useState, useRef } from 'react';\nimport Color from 'color';\n\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport { useStepperStyles } from './App-classes';\nimport { Configuration, AnalysedLine, DescribedColor, ConfigPlayer, presetDescribedColors } from 'common';\n\nexport interface StepConfigInitState {\n  lines: AnalysedLine[];\n  playerIds: string[];\n  config: Configuration;\n}\n\nexport interface StepConfigResult {\n  newConfig: Configuration;\n}\n\ninterface PlayerConfigProps {\n  name: string;\n  color: string;\n  enabled: boolean;\n  setName: (value: string) => void;\n  setColor: (value: string) => void;\n  setEnabled: (value: boolean) => void;\n}\n\nconst useStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    PlayerConfig: {\n    },\n    Center: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n  }),\n);\n\nconst PlayerConfig: React.FC<PlayerConfigProps> = (props: PlayerConfigProps) => {\n  const classes = useStyles();\n  return (\n    <Grid item xs={6}>\n      <Grid container>\n        <Grid item xs={8}>\n          <TextField\n            defaultValue={props.name}\n            variant=\"outlined\"\n            fullWidth\n            onBlur={(event: React.FocusEvent<HTMLInputElement>): void => {\n              props.setName(event.target.value || '');\n            }}\n          />\n        </Grid>\n        <Grid item xs={4} className={classes.Center}>\n          <Grid container>\n            <FormGroup row className={classes.Center}>\n              <FormControl>\n                <Switch\n                  checked={props.enabled}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void => {\n                    props.setEnabled(checked);\n                  }}\n                  value=\"primary\"\n                />\n              </FormControl>\n              <FormControl style={props.enabled ? {} : { visibility: 'hidden' }}>\n                <Select\n                  style={{\n                    backgroundColor: props.color,\n                    color: Color(props.color).isLight() ? 'black' : 'white',\n                    padding: 4,\n                  }}\n                  native\n                  value={props.color}\n                  onChange={(event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n                    props.setColor(event.target.value as string);\n                  }}\n                >\n                  {presetDescribedColors.map((describedColor: DescribedColor): React.ReactNode => {\n                    const { value, name, isLight } = describedColor;\n                    return (\n                      <option\n                        key={value}\n                        value={value}\n                        style={{\n                          backgroundColor: value,\n                          color: isLight ? 'black' : 'white',\n                        }}\n                      >\n                        {name || value}\n                      </option>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\ninterface SourceInputProps {\n  getInitState: () => StepConfigInitState;\n  onPrevStep: () => void;\n  onNextStep: (result: StepConfigResult) => void;\n}\n\ninterface StepConfigPlayersProps {\n  playerIds: string[];\n  players: Record<string, ConfigPlayer>;\n  setPlayer: (id: string, value: ConfigPlayer) => void;\n}\n\nconst StepConfigPlayers: React.FC<StepConfigPlayersProps> = (props: StepConfigPlayersProps) => {\n  const { playerIds, players, setPlayer } = props;\n  return (\n    <Grid container>\n      {playerIds.map((playerId: string) => {\n        const player = players[playerId];\n        return (\n          <PlayerConfig\n            key={playerId}\n            name={player.displayName}\n            setName={(value: string): void => {\n              setPlayer(playerId, {\n                ...player,\n                displayName: value,\n              });\n            }}\n            enabled={player.enabled}\n            setEnabled={(value: boolean): void => {\n              setPlayer(playerId, {\n                ...player,\n                enabled: value,\n              });\n            }}\n            color={player.color}\n            setColor={(value: string): void => {\n              setPlayer(playerId, {\n                ...player,\n                color: value,\n              });\n            }}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport const StepConfig: React.FC<SourceInputProps> = (props: SourceInputProps) => {\n  const { getInitState, onPrevStep, onNextStep } = props;\n  const { lines: initLines, config, playerIds } = getInitState();\n  const stepperClasses = useStepperStyles();\n  const lines = useRef<AnalysedLine[]>(initLines);\n  const [players, setPlayers] = useState<Record<string, ConfigPlayer>>(config.players);\n  function setPlayer(id: string, value: ConfigPlayer): void {\n    setPlayers({ ...players, [id]: value });\n  }\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <StepConfigPlayers\n          playerIds={playerIds}\n          players={players}\n          setPlayer={setPlayer}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={onPrevStep}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            onNextStep({\n              newConfig: {\n                players,\n              },\n            });\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};","import React from 'react';\n\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport { useStepperStyles } from './App-classes';\nimport { AnalysedLine, Configuration } from 'common';\n\nexport interface StepResultInitState {\n  lines: AnalysedLine[];\n  config: Configuration;\n}\n\ninterface StepResultProps {\n  getInitState: () => StepResultInitState;\n  onPrevStep: () => void;\n  onRestart: () => void;\n}\n\nconst useStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    Output: {\n      fontFamily: '微软雅黑',\n      fontSize: 12,\n      padding: '18.5px 14px',\n\n      borderColor: '#0000003b',\n      '&:hover': {\n        borderColor: '#000000de',\n      },\n      borderStyle: 'solid' ,\n      borderWidth: 1,\n      borderRadius: 4,\n      maxHeight: 200,\n      overflowY: 'scroll',\n\n      '& > p': {\n        margin: '0.5em 0',\n      },\n    },\n  }),\n);\n\nexport const StepResult: React.FC<StepResultProps> = (props: StepResultProps) => {\n  const { getInitState, onPrevStep, onRestart } = props;\n  const { lines, config } = getInitState();\n  const stepperClasses = useStepperStyles();\n  const classes = useStyles();\n  const { players } = config;\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid\n        item\n        xs={12}\n        style={{ maxHeight: 400, overflowY: 'scroll' }}\n        className={stepperClasses.Body}\n      >\n        <div\n          className={classes.Output}\n          onDoubleClick={(): void => {\n            const selection = window.getSelection();\n            if (!selection)\n              return;\n            const element = document.getElementById('result');\n            if (!element)\n              return;\n            const range = document.createRange();\n            range.selectNode(element);\n            selection.removeAllRanges();\n            selection.addRange(range);\n          }}\n          id='result'\n        >\n          {lines.map((line: AnalysedLine, paragraphId: number) => {\n            const { playerId, content } = line;\n            const player = players[playerId];\n            if (!player.enabled)\n              return null;\n            return (\n              <p\n                key={paragraphId}\n                style={{\n                  color: player.color,\n                }}\n              >\n                {`<${player.displayName}> `}\n                {content.map((contentLine: string, contentId: number) => {\n                  const newLine = contentId === 0 ? [] : [<br key={`br-${contentId}`}/>];\n                  return newLine.concat([<span key={contentId}>{contentLine}</span>]);\n                })}\n              </p>\n            );\n          })}\n        </div>\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={onPrevStep}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          className={stepperClasses.ControlButton}\n          style={{ backgroundColor: '#d4d45f' }}\n          onClick={onRestart}\n        >\n          再做一团\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};","import React, { useState, useRef } from 'react';\nimport Store from 'store';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { Configuration, AnalyseResult } from 'common';\nimport { convert } from 'parser';\n\nimport './index.css';\nimport './App.css';\nimport { StepSource, StepSourceResult, StepSourceInitState } from './StepSource';\nimport { StepConfig, StepConfigResult, StepConfigInitState } from './StepConfig';\nimport { StepResult, StepResultInitState } from './StepResult';\n\ninterface HeaderProps {\n}\n\nconst Header: React.FC = (props: HeaderProps) => {\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <Typography variant=\"h6\">\n          跑团记录着色器\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nconst emptyConfiguration: Configuration = { players: {} };\n\nfunction loadConfig(): Configuration {\n  return Store.get('config') || emptyConfiguration;\n}\n\nfunction saveConfig(config: Configuration): void {\n  Store.set('config', config);\n}\n\ninterface AlertDialogProps {\n  open: boolean;\n  onClose: () => void;\n  body: React.ReactNode;\n}\n\nconst AlertDialog: React.FC<AlertDialogProps> = ({ open, onClose, body }: AlertDialogProps) => {\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle>出错啦</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {body}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\" autoFocus>\n            好的\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\ninterface MainProps {\n  setError: (body: React.ReactNode) => void;\n}\n\nconst Main: React.FC<MainProps> = ({ setError }: MainProps) => {\n  const [step, setStep] = useState<number>(1);\n\n  const sourceText = useRef<string>('');\n  const oldConfig = useRef<Configuration>(emptyConfiguration);\n  const lastConvertResult = useRef<AnalyseResult>({ lines: [], playerIds: [], nextConfig: emptyConfiguration });\n\n  function onSourceNextStep(result: StepSourceResult): void {\n    sourceText.current = result.text;\n    oldConfig.current = loadConfig();\n\n    const convertResult = convert(sourceText.current, oldConfig.current);\n    if (convertResult.lines.length === 0 || convertResult.playerIds.length === 0) {\n      setError('无法从这段记录中找到可识别的部分！请检查后再试一次吧！');\n      return;\n    }\n    lastConvertResult.current = convertResult;\n    setStep(step+1);\n  }\n\n  function onConfigPrevStep(): void {\n    setStep(step-1);\n  }\n\n  const newConfig = useRef<Configuration>(emptyConfiguration);\n  function onConfigNextStep(result: StepConfigResult): void {\n    saveConfig(result.newConfig);\n    newConfig.current = result.newConfig;\n    setStep(step+1);\n  }\n\n  function onResultPrevStep(): void {\n    saveConfig(oldConfig.current);\n    setStep(step-1);\n  }\n\n  function onResultRestart(): void {\n    sourceText.current = '';\n    setStep(1);\n  }\n\n  switch (step) {\n    case 1:\n      return (\n        <StepSource\n          key={step}\n          getInitState={(): StepSourceInitState => ({\n            text: sourceText.current,\n          })}\n          onNextStep={onSourceNextStep}\n        />\n      );\n    case 2:\n      return (\n        <StepConfig\n          key={step}\n          getInitState={(): StepConfigInitState => {\n            return {\n              lines: lastConvertResult.current.lines,\n              playerIds: lastConvertResult.current.playerIds,\n              config: lastConvertResult.current.nextConfig,\n            };\n          }}\n          onPrevStep={onConfigPrevStep}\n          onNextStep={onConfigNextStep}\n        />\n      );\n    case 3:\n      return (\n        <StepResult\n          key={step}\n          getInitState={(): StepResultInitState => {\n            return {\n              lines: lastConvertResult.current.lines,\n              config: newConfig.current,\n            };\n          }}\n          onPrevStep={onResultPrevStep}\n          onRestart={onResultRestart}\n        />\n      );\n  }\n  return (\n    <div>\n      Unexpected step {step}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [errorMessage, setErrorMessage] = useState<React.ReactNode | null>();\n  return (\n    <div className=\"root\">\n      <Header />\n      <Container maxWidth='md' className='Body-container'>\n        <Grid container xs={12}>\n          <Main\n            setError={setErrorMessage}\n          />\n        </Grid>\n      </Container>\n      <AlertDialog\n        open={!!errorMessage}\n        onClose={(): void => setErrorMessage(null)}\n        body={errorMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { analyse } from './analyse';\nimport { parseChat, ParseResult } from './parser_chat';\nimport { Configuration, AnalyseResult } from 'common';\n\nexport function convert(source: string, currentConfig: Configuration): AnalyseResult {\n  const parseResult: ParseResult = parseChat(source);\n  return analyse(parseResult, currentConfig);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'web';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}