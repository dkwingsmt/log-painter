{"version":3,"sources":["common/App-classes.ts","common/AlertDialog.tsx","common/MultiStep.tsx","step-render/StepRender.tsx","common/renderers.tsx","common/configs.ts","step-source/parser_chat.ts","step-source/group.ts","step-source/StepSource.tsx","step-config/postprocesses.ts","step-config/PaletteSwitch.tsx","step-config/StepConfig.tsx","web/App.tsx","serviceWorker.ts","index.tsx","common/colors.ts"],"names":["useStepperStyles","makeStyles","createStyles","Control","display","marginTop","Body","Container","paddingTop","ControlButton","width","marginLeft","AlertDialog","open","onClose","body","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","id","DialogActions","Button","onClick","color","autoFocus","MultiStep","props","Step1","step1","Step2","step2","Step3","step3","initConfig","saveConfig","useState","session","setSession","initStates","setInitStates","o1","o2","configStack","setConfigStack","pushConfig","value","popConfig","slice","length","Grid","container","xs","key","show","onNextStep","result","config","args","onPrevStep","onRestart","useStyles","Output","fontFamily","fontSize","padding","borderColor","borderStyle","borderWidth","borderRadius","maxHeight","overflowY","margin","StepRender","useContext","configContext","stepperClasses","classes","playersConfig","useRef","players","current","snackbarControl","setSnackbarControl","alertOnSnackbar","scheme","renderingSchemes","general","rendererScheme","lines","map","line","content","playerName","playerId","displayName","playerColor","ClipboardJS","target","element","document","getElementById","Error","on","setImmediate","e","console","error","clipboard","useEffect","destroy","className","item","onDoubleClick","selection","window","getSelection","range","createRange","selectNode","removeAllRanges","addRange","style","float","renderContent","justify","variant","backgroundColor","anchorOrigin","vertical","horizontal","autoHideDuration","message","standardLineRenderer","contentLine","contentId","concat","name","description","allowNewPalette","previewRenderer","finalRenderer","dangerouslySetInnerHTML","__html","escapeHtml","join","preview","renderer","defaultGeneralConfig","removeLinesStartedWithParenthesis","removeLinesStartedWithDot","removeLinesStartedWithLenticular","regularizeQuotes","palette","sanitizeConfig","nonNullValue","colorPalettes","emptyConfig","undefined","realConfigStorage","load","Store","get","save","set","React","createContext","removeSystemTextConverter","logLine","withdrawParser","withdrawMemberParser","withdrawMember2Parser","commonFriendsParser","joinMemberParser","inviteMemberParser","end","some","toMatch","exec","regNumber","regTitle","regTime","removeMobileDateConverter","dateParser","removeMessageManagerSystemTextConverter","RegExp","source","defaultConverter","trim","splice","trimNumber","src","exportFromLog","headerParser","regDateName","matches","time","number","player","logLineConverter","includes","copyFromChat","regDateTime","title","flow","copyFromMessageManager","copyFromMobile","getPlayerId","defaultGroupedPlayer","names","Set","add","parseAndGroup","logLines","parsedLine","push","values","groupByPlayers","data","firstLogConfig","split","parsedHeader","logConfig","currentLogLine","compact","parseChat","StepSource","text","setText","alertControl","setAlertControl","TextField","label","placeholder","multiline","fullWidth","rows","onChange","event","disabled","groupResult","processResult","inQuoteChars","outQuoteChars","now","ch","outerButton","paper","flexDirection","background","menu","flex","descriptionBox","overflowX","descriptionText","descriptionDisplay","height","descriptionDisplayCell","PaletteSwitch","setValue","dialogOpen","setDialogOpen","Object","dialogSelect","setDialogSelect","handleCloseDialog","size","Paper","MenuList","MenuItem","selected","contents","PlayerConfig","Center","alignItems","PlayerConfigDashboard","enabled","setEnabled","setName","setColor","defaultValue","onBlur","FormGroup","row","FormControl","Switch","checked","visibility","Select","Color","isLight","textAlign","native","paletteColor","StepConfigPlayers","setPlayer","useConfigStyles","marginBottom","RendererSelect","RendererDescription","RendererPreview","border","StepConfigGeneral","setPalette","FormControlLabel","control","getFirstLines","visited","forEach","StepConfigRenderer","schemeId","setScheme","memoizedGetFirstLines","memoize","options","filter","paletteId","firstLines","change","child","newValue","initializePlayers","analysePlayers","playerConfigs","colors","availableColors","existingConfig","sourceNames","reverse","Array","from","playerResult","nameCandidates","uniq","keys","fromPairs","postProcess","generalConfig","resultLines","StepConfig","setGeneralConfig","setPlayers","newSchemeId","mapValues","useHeaderStyles","logo","marginRight","horizontalFill","toolbarIcon","fill","Header","repoUrl","AppBar","position","Toolbar","Avatar","alt","Typography","IconButton","aria-label","href","rel","svg","GithubIcon","Main","configStorage","setConfig","ConfigProvider","Provider","theme","createMuiTheme","primary","main","secondary","App","ThemeProvider","maxWidth","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","initializeColors","rawData","others","rawBbsColors","rawV2Colors","once"],"mappings":"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","file":"static/js/main.5723cec4.chunk.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles';\n\nexport const useStepperStyles = makeStyles((/*theme: Theme*/) =>\n  createStyles({\n    Control: {\n      display: 'flex',\n      marginTop: 20,\n    },\n    Body: {\n    },\n    Container: {\n      paddingTop: 10,\n    },\n    ControlButton: {\n      width: 100,\n      marginLeft: 10,\n    }\n  }),\n);\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport interface AlertDialogControl {\n  open: boolean;\n  body?: React.ReactNode;\n}\n\ninterface AlertDialogProps extends AlertDialogControl {\n  onClose: () => void;\n}\n\nconst AlertDialog: React.FC<AlertDialogProps> = ({ open, onClose, body }: AlertDialogProps) => {\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle>出错啦</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {body}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\" autoFocus>\n            好的\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport { AlertDialog };","import React, { useState } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n\ninterface BaseStep {\n  show: boolean;\n}\n\ninterface WithOutArg<OutArg, Config> {\n  onNextStep: (result: OutArg, config: Config) => void;\n}\n\ninterface WithPrevStep<InArg> {\n  args: InArg;\n  onPrevStep: () => void;\n}\n\ninterface WithRestart<Config> {\n  onRestart: (config: Config) => void;\n}\n\nexport type StartStepProps<O, Config> = BaseStep & WithOutArg<O, Config>;\nexport type MiddleStepProps<I, O, Config> = BaseStep & WithOutArg<O, Config> & WithPrevStep<I>;\nexport type EndStepProps<I, Config> = BaseStep & WithPrevStep<I> & WithRestart<Config>;\n\ninterface MultiStepProps<O1, O2, Config> {\n  step1: React.ComponentType<StartStepProps<O1, Config>>;\n  step2: React.ComponentType<MiddleStepProps<O1, O2, Config>>;\n  step3: React.ComponentType<EndStepProps<O2, Config>>;\n  initConfig: () => Config;\n  saveConfig: (value: Config) => void;\n}\n\nconst MultiStep = <O1, O2, Config>(\n  props: MultiStepProps<O1, O2, Config>,\n): React.ReactElement | null => {\n  const { step1: Step1, step2: Step2, step3: Step3, initConfig, saveConfig } = props;\n  // `session` is used to refresh steps (mostly step 1) on restart.\n  const [session, setSession] = useState<number>(0);\n\n  const [initStates, setInitStates] = useState<[O1?, O2?]>([]);\n  const [o1, o2] = initStates;\n\n  const [configStack, setConfigStack] = useState<Config[]>((): Config[] => {\n    return [initConfig()];\n  });\n  function pushConfig(value: Config): void {\n    saveConfig(value);\n    setConfigStack([...configStack, value]);\n  }\n  function popConfig(): void {\n    setConfigStack(configStack.slice(0, configStack.length - 1));\n    saveConfig(configStack[configStack.length - 1]);\n  }\n\n  return (\n    <Grid container xs={12}>\n      <Step1\n        key={`${session}-1`}\n        show={initStates.length === 0}\n        onNextStep={(result: O1, config: Config): void => {\n          pushConfig(config);\n          setInitStates([\n            result,\n          ]);\n        }}\n      />\n\n      {o1 == null ? null : (\n        <Step2\n          key={`${session}-2`}\n          show={initStates.length === 1}\n          args={o1}\n          onPrevStep={(): void => {\n            popConfig();\n            setInitStates([\n            ]);\n          }}\n          onNextStep={(result: O2, config: Config): void => {\n            pushConfig(config);\n            setInitStates([\n              initStates[0],\n              result,\n            ]);\n          }}\n        />\n      )}\n\n      {o2 == null ? null : (\n        <Step3\n          key={`${session}-3`}\n          show={initStates.length === 2}\n          args={o2}\n          onPrevStep={(): void => {\n            popConfig();\n            setInitStates([\n              initStates[0],\n            ]);\n          }}\n          onRestart={(config: Config): void => {\n            setInitStates([]);\n            setSession(session + 1);\n            setConfigStack([config]);\n            saveConfig(config);\n          }}\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport { MultiStep };\n","import React, { useRef, useState, useEffect, useContext } from 'react';\nimport ClipboardJS from 'clipboard';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nimport {\n  useStepperStyles,\n  EndStepProps,\n  Configuration,\n  PlayerConfig,\n  configContext,\n} from 'common';\nimport {\n  AnalysedLine,\n} from 'step-source';\nimport {\n  StepConfigResult,\n} from 'step-config';\nimport { renderContent, renderingSchemes } from 'common/renderers';\n\ntype StepRenderProps = EndStepProps<StepConfigResult, Configuration>;\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    Output: {\n      fontFamily: '微软雅黑',\n      fontSize: 14,\n      padding: '16px 14px',\n\n      borderColor: '#0000003b',\n      '&:hover': {\n        borderColor: '#000000de',\n      },\n      borderStyle: 'solid' ,\n      borderWidth: 1,\n      borderRadius: 4,\n      maxHeight: 200,\n      overflowY: 'scroll',\n\n      '& > p': {\n        margin: '0.5em 0',\n      },\n    },\n  }),\n);\n\n\ninterface SnackbarControl {\n  body?: React.ReactNode;\n  open: boolean;\n}\n\nexport const StepRender: React.FC<StepRenderProps> = (props: StepRenderProps) => {\n  const { args, onPrevStep, onRestart } = props;\n  const config: Configuration = useContext<Configuration>(configContext);\n  const stepperClasses = useStepperStyles();\n  const classes = useStyles();\n  const playersConfig = useRef<Record<string, PlayerConfig>>(config.players || {}).current;\n  const [snackbarControl, setSnackbarControl] = useState<SnackbarControl>({\n    open: false,\n  });\n  const alertOnSnackbar = (body: React.ReactNode): void => {\n    setSnackbarControl({ body, open: true });\n  };\n  const scheme = renderingSchemes[config.general.rendererScheme];\n  const lines = args.lines.map((line: AnalysedLine) => ({\n    content: line.content,\n    playerName: playersConfig[line.playerId]?.displayName ?? '错误',\n    playerColor: playersConfig[line.playerId]?.color ?? 'black',\n  }));\n\n  const [clipboard] = useState<ClipboardJS>((): ClipboardJS => {\n    const result: ClipboardJS = new ClipboardJS('#clipboard-button', {\n      target: (): Element => {\n        const element: Element | null = document.getElementById('result-body');\n        if (element == null) {\n          alertOnSnackbar('复制错误：找不到复制对象');\n          throw new Error('找不到复制对象');\n        }\n        return element;\n      },\n    });\n    result.on('success', () => {\n      setImmediate(() => alertOnSnackbar('已复制到剪贴板！'));\n    });\n    result.on('error', (e: ClipboardJS.Event) => {\n      alertOnSnackbar('复制错误！请双击文本框手动复制吧！');\n      console.error(e);\n    });\n    return result;\n  });\n\n  useEffect(() => {\n    return (): void => {\n      clipboard.destroy();\n    };\n  });\n\n  if (!props.show)\n    return null;\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid\n        item\n        xs={12}\n        className={stepperClasses.Body}\n      >\n        <div\n          className={classes.Output}\n          onDoubleClick={(): void => {\n            const selection = window.getSelection();\n            if (!selection)\n              return;\n            const element = document.getElementById('result-body');\n            if (!element)\n              return;\n            const range = document.createRange();\n            range.selectNode(element);\n            selection.removeAllRanges();\n            selection.addRange(range);\n          }}\n          id='result-body'\n        >\n          <IconButton\n            style={{\n              float: 'right',\n              marginTop: -15,\n            }}\n            id='clipboard-button'\n          >\n            <FileCopyIcon />\n          </IconButton>\n          {renderContent(lines, scheme, false)}\n        </div>\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={onPrevStep}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          className={stepperClasses.ControlButton}\n          style={{ backgroundColor: '#d4d45f' }}\n          onClick={(): void => { onRestart(config); }}\n        >\n          再做一团\n        </Button>\n      </Grid>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={snackbarControl.open}\n        autoHideDuration={6000}\n        onClose={(): void => {\n          setSnackbarControl({\n            ...snackbarControl,\n            open: false,\n          });\n        }}\n        message={snackbarControl.body}\n      />\n    </Grid>\n  );\n};\n","import React from 'react';\n\nimport escapeHtml from 'escape-html';\nimport join from 'lodash/join';\n\nexport type RendererId = 'standard-rich' | 'standard-bbs' | 'tab-rich';\n\nexport interface RendereeLine {\n  content: string[];\n  playerName: string;\n  playerColor: string;\n}\n\ninterface RenderHandler {\n  body?: (content: React.ReactNode) => React.ReactNode;\n  line: (line: RendereeLine, key: number) => React.ReactNode;\n}\n\nexport interface RenderingScheme {\n  id: RendererId;\n  name: string;\n  description: string;\n  allowNewPalette: boolean;\n  previewRenderer: RenderHandler;\n  finalRenderer: RenderHandler;\n}\n\nfunction standardLineRenderer(line: RendereeLine, key: number): React.ReactNode {\n  return (\n    <p\n      key={key}\n      style={{\n        color: line.playerColor,\n      }}\n    >\n      {`<${line.playerName}> `}\n      {line.content.map((contentLine: string, contentId: number) => {\n        const newLine = contentId === 0 ? [] : [<br key={`br-${contentId}`}/>];\n        return newLine.concat([<span key={contentId}>{contentLine}</span>]);\n      })}\n    </p>\n  );\n}\n\nconst schemeStandardRich: RenderingScheme = {\n  id: 'standard-rich',\n  name: '标准尖括号（富文本）',\n  description: '最常见的格式。输出富文本，可直接复制粘贴到Word里。预览如下：',\n  allowNewPalette: true,\n  previewRenderer: { line: standardLineRenderer },\n  finalRenderer: { line: standardLineRenderer },\n};\n\nconst schemeStandardBbs: RenderingScheme = {\n  id: 'standard-bbs',\n  name: '标准尖括号（BBS\b代码）',\n  description: '最常见的格式。输出BBS代码，可复制粘贴到果园。最终效果预览如下：',\n  allowNewPalette: false,\n  previewRenderer: { line: standardLineRenderer },\n  finalRenderer: {\n    line: (line: RendereeLine , key: number) => (\n      <span\n        key={key}\n      >\n        {`[color=${line.playerColor}]<${line.playerName}> `}\n        {line.content.map((contentLine: string, contentId: number) => {\n          const newLine = contentId === 0 ? [] : [<br key={`br-${contentId}`}/>];\n          return newLine.concat([<span key={contentId}>{contentLine}</span>]);\n        })}\n        {`[/color]`}\n        <br/>\n      </span>\n    ),\n  },\n};\n\nconst schemeTabRich: RenderingScheme = {\n  id: 'tab-rich',\n  name: 'Tab分割（富文本）',\n  description: '以Tab分割各元素，保证垂直对齐的特殊格式。输出富文本，可直接复制粘贴到Word等软件中。大致效果预览如下（最终效果取决于文档设定）：',\n  allowNewPalette: true,\n  previewRenderer: {\n    body: (content: React.ReactNode) => (\n      <table className=\"tab-renderer-preview-table\">\n        {content}\n      </table>\n    ),\n    line: (line: RendereeLine, key: number) => (\n      <tr\n        key={key}\n        style={{\n          color: line.playerColor,\n        }}\n      >\n        <td>\n          {line.playerName}\n        </td>\n        <td>\n          {line.content.map((contentLine: string, contentId: number) => {\n            const newLine = contentId === 0 ? [] : [<br key={`br-${contentId}`}/>];\n            return newLine.concat([<span key={contentId}>{contentLine}</span>]);\n          })}\n        </td>\n      </tr>\n    ),\n  },\n  finalRenderer: {\n    line: (line: RendereeLine, key: number) => (\n      <pre\n        key={key}\n        style={{ color: line.playerColor }}\n        dangerouslySetInnerHTML={{\n          __html: `&#9;${escapeHtml(line.playerName)}&#9;${join(line.content.map(escapeHtml), '&#11;')}`\n        }}\n      />\n    ),\n  },\n};\n\nexport const renderingSchemes: Record<RendererId, RenderingScheme> = {\n  'standard-rich': schemeStandardRich,\n  'standard-bbs': schemeStandardBbs,\n  'tab-rich': schemeTabRich,\n};\n\nexport function renderContent(lines: RendereeLine[], scheme: RenderingScheme, preview: boolean) {\n  const renderer = preview ? scheme.previewRenderer : scheme.finalRenderer;\n  const body = lines.map(renderer.line);\n  if (renderer.body != null) {\n    return renderer.body(body);\n  }\n  return body;\n}\n","import React from 'react';\nimport Store from 'store';\n\nimport { ColorPalette, colorPalettes } from './colors';\nimport { RendererId, renderingSchemes } from './renderers';\n\nexport interface GeneralConfig {\n  removeLinesStartedWithParenthesis: boolean;\n  removeLinesStartedWithDot: boolean;\n  removeLinesStartedWithLenticular: boolean;\n  regularizeQuotes: boolean;\n  palette: ColorPalette;\n  rendererScheme: RendererId;\n}\n\nexport const defaultGeneralConfig: GeneralConfig = {\n  removeLinesStartedWithParenthesis: false,\n  removeLinesStartedWithDot: false,\n  removeLinesStartedWithLenticular: false,\n  regularizeQuotes: false,\n  palette: 'v2',\n  rendererScheme: 'standard-rich',\n};\n\nexport interface PlayerConfig {\n  displayName: string;\n  enabled: boolean;\n  color: string;\n}\n\nexport interface Configuration {\n  players: Record<string, PlayerConfig>;\n  general: GeneralConfig;\n}\n\nexport const sanitizeConfig = (value: {} | undefined): Configuration => {\n  const nonNullValue = (value ?? {}) as Record<string, {}>;\n  const result = {\n    players: (nonNullValue['players'] ?? {}) as Record<string, PlayerConfig>,\n    general: {\n      ...defaultGeneralConfig,\n      ...nonNullValue['general'] as GeneralConfig\n    },\n  };\n  if (!(result.general.palette in colorPalettes)) {\n    result.general.palette = value == null ? 'v2' : 'bbs';\n  }\n  if (!(result.general.rendererScheme in renderingSchemes)) {\n    result.general.rendererScheme = 'standard-rich';\n  }\n  if (!renderingSchemes[result.general.rendererScheme].allowNewPalette\n      && result.general.palette == 'v2') {\n    result.general.rendererScheme = 'standard-rich';\n  }\n  return result;\n};\n\nconst emptyConfig = sanitizeConfig(undefined);\n\nexport interface ConfigStorage {\n  load: () => Configuration | undefined;\n  save: (value: Configuration) => void;\n}\n\nexport const realConfigStorage: ConfigStorage = {\n  load: () => {\n    return Store.get('config');\n  },\n  save: (config: {}): void => {\n    Store.set('config', config);\n  },\n};\n\nexport const configContext: React.Context<Configuration> = React.createContext<Configuration>(emptyConfig);\n","import compact from 'lodash/compact';\nimport trim from 'lodash/trim';\nimport flow from 'lodash/flow';\n\nexport interface ParsedPlayer {\n  name: string;\n  number?: string;\n  title?: string;\n}\n\nexport interface ParsedLine {\n  time?: string;\n  player: ParsedPlayer;\n  content: string[];\n}\n\nexport interface ParseResult {\n  logLines: ParsedLine[];\n}\n\ninterface ParsedHeader {\n  player: ParsedPlayer;\n  time?: string;\n}\n\ntype HeaderParser = (line: string) => ParsedHeader | null;\ntype LogLineConverter = (logLine: ParsedLine) => ParsedLine | null;\n\ninterface LogConfig {\n  headerParser: HeaderParser;\n  logLineConverter: LogLineConverter;\n}\n\nfunction removeSystemTextConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n\n  const withdrawParser = /^.*撤回了一条消息( 重新编辑)?$/;\n  const withdrawMemberParser = /^.*撤回了成员.*的一条消息$/;\n  const withdrawMember2Parser = /^.*撤回了一条成员消息$/;\n  const commonFriendsParser = /^你和.*有\\d+个共同好友，点击添加好友。$/;\n  const joinMemberParser = /^.*加入本群。$/;\n  const inviteMemberParser = /^.*邀请.*加入了本群。$/;\n\n  let end = lines.length - 1;\n  for (; end >=0; end--) {\n    if ([\n      /^ *$/,\n      withdrawParser,\n      withdrawMemberParser,\n      withdrawMember2Parser,\n      commonFriendsParser,\n      joinMemberParser,\n      inviteMemberParser,\n    ].some((toMatch: RegExp) => toMatch.exec(lines[end]))) {\n      continue;\n    }\n    break;\n  }\n  logLine.content = logLine.content.slice(0, end + 1);\n  return logLine;\n}\n\nconst regNumber = /\\(\\d+\\)|<.+@.+\\..+>/;\nconst regTitle = /(?:【(.{1,6})】)?/;\nconst regTime = /(?:(?:上午|下午) )?\\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM))?/;\n\nfunction removeMobileDateConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n\n  const dateParser = /^— —  \\d{4}-\\d{1,2}-\\d{1,2}  — —$/;\n\n  let end = lines.length - 1;\n  for (; end >=0; end--) {\n    if ([\n      /^ *$/,\n      dateParser,\n    ].some((toMatch: RegExp) => toMatch.exec(lines[end]))) {\n      continue;\n    }\n    break;\n  }\n  logLine.content = logLine.content.slice(0, end + 1);\n  return logLine;\n}\n\nfunction removeMessageManagerSystemTextConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n\n  const dateParser = /^ \\d{4}-\\d{2}-\\d{2}$/;\n  const withdrawParser = new RegExp(`^${regTime.source}.*撤回了一条消息$`);\n  const withdrawMemberParser = new RegExp(`^${regTime.source}.*撤回了成员.*的一条消息$`);\n  const withdrawMember2Parser = new RegExp(`^${regTime.source}.*撤回了一条成员消息$`);\n  // const commonFriendsParser = /^你和.*有\\d+个共同好友，点击添加好友。$/;\n  const joinMemberParser = new RegExp(`^${regTime.source}.*加入本群。$`);\n  // const inviteMemberParser = /^.*邀请.*加入了本群。$/;\n\n  let end = lines.length - 1;\n  for (; end >=0; end--) {\n    if ([\n      /^ *$/,\n      dateParser,\n      withdrawParser,\n      withdrawMemberParser,\n      withdrawMember2Parser,\n      joinMemberParser,\n    ].some((toMatch: RegExp) => toMatch.exec(lines[end]))) {\n      continue;\n    }\n    break;\n  }\n  logLine.content = logLine.content.slice(0, end + 1);\n  return logLine;\n}\n\nfunction defaultConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n  // Remove starting and trailing empty lines.\n  while(lines.length > 0 && lines[0].trim() === '') {\n    lines.splice(0, 1);\n  }\n  while(lines.length > 0 && lines[lines.length-1].trim() === '') {\n    lines.splice(lines.length-1, 1);\n  }\n  if (lines.length === 0)\n    return null;\n  return logLine;\n}\n\nfunction trimNumber(src: string): string {\n  return trim(src, '()<>');\n}\n\n// Export from log\n// E.g. \"2019-09-23 8:43:38 PM 骰娘-Roll100(872001750)\"\n// E.g. \"2019-09-23 8:43:38 PM 骰娘-Roll100\"\nconst exportFromLog: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regDateName = new RegExp(`\\\\d{4}-\\\\d{2}-\\\\d{2} ${regTime.source}`);\n    const regHeader = new RegExp(`^(${regDateName.source}) (.*?)(${regNumber.source})?$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, time, name, number] = matches;\n    return {\n      player: {\n        name,\n        number: number == null ? undefined : trimNumber(number),\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    if (['10000', '1000000'].includes(logLine.player.number || ''))\n      return null;\n    return defaultConverter(logLine);\n  },\n};\n\n// Copy from chat mainwindow or sidewindow\n// E.g. \"【冒泡】无情的围观熊 2/14/2020 9:16:13 PM\"\n// E.g. \"【煤油】丧 丧 熊 9:59:54 PM\"\nconst copyFromChat: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regDateTime = new RegExp(`(?:\\\\d{1,4}\\\\/\\\\d{1,2}\\\\/\\\\d{1,4} )?${regTime.source}`);\n    const regHeader = new RegExp(`^${regTitle.source}(.*?) (${regDateTime.source})$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from message manager\n// E.g. \"织练取(958884) 3:13:28 AM\"\nconst copyFromMessageManager: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = new RegExp(`^${regTitle.source}(.*?)(${regNumber.source}) (${regTime.source})$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, number, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n        number: trimNumber(number),\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeMessageManagerSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from mobile\n// E.g. \"a dark ideation  23:50:40\"\nconst copyFromMobile: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(.*?) {2}(\\d{1,2}:\\d{2}:\\d{2}) *$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, name, time] = matches;\n    return {\n      player: {\n        name,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeMobileDateConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\nexport function parseChat(data: string): ParseResult {\n  const logLines: ParsedLine[] = [];\n  let firstLogConfig: LogConfig | undefined = undefined;\n  for (const line of data.split('\\n')) {\n    const parsedHeader = ((): ParsedHeader | null => {\n      if (firstLogConfig)\n        return firstLogConfig.headerParser(line);\n      for (const logConfig of [\n        copyFromMessageManager,\n        copyFromMobile,\n        exportFromLog,\n        copyFromChat,\n      ]) {\n        const result = logConfig.headerParser(line);\n        if (result) {\n          firstLogConfig = logConfig;\n          return result;\n        }\n      }\n      return null;\n    })();\n    if (parsedHeader) {\n      logLines.push({\n        ...parsedHeader,\n        content: [],\n      });\n    } else {\n      if (firstLogConfig) {\n        const currentLogLine: ParsedLine | undefined = logLines[logLines.length - 1];\n        // Content after a recognizable header\n        if (currentLogLine)\n          currentLogLine.content.push(line);\n      } else {\n        // Unrecognizable content before the first header\n        // Do nothing\n      }\n    }\n  }\n  if (!firstLogConfig)\n    return { logLines: [] };\n\n  const convertedLogLines = compact(\n    logLines.map(firstLogConfig.logLineConverter)\n  );\n  return { logLines: convertedLogLines };\n}\n","import values from 'lodash/values';\n\nimport { parseChat, ParseResult, ParsedPlayer } from './parser_chat';\n\nexport interface AnalysedLine {\n  playerId: string;\n  time?: string;\n  title?: string;\n  content: string[];\n}\n\nexport interface AnalysedPlayer {\n  playerId: string;\n  names: Set<string>;\n}\n\nexport interface GroupResult {\n  players: AnalysedPlayer[];\n  lines: AnalysedLine[];\n};\n\nfunction getPlayerId(player: ParsedPlayer): string {\n  if (player.number)\n    return `qq:${player.number}`;\n  return `name:${player.name}`;\n}\n\nfunction defaultGroupedPlayer(playerId: string, number: string | undefined): AnalysedPlayer {\n  const names = new Set<string>();\n  if (number != null)\n    names.add(number);\n  return {\n    playerId: playerId,\n    names: names,\n  };\n}\n\nfunction groupByPlayers(result: ParseResult): GroupResult {\n  const lines: AnalysedLine[] = [];\n  const players: Record<string, AnalysedPlayer> = {};\n  for (const parsedLine of result.logLines) {\n    const { player, time, content } = parsedLine;\n    const playerId = getPlayerId(player);\n    if (!players.playerId)\n      players[playerId] = defaultGroupedPlayer(playerId, player.number);\n    players[playerId].names.add(player.name);\n    lines.push({\n      playerId: playerId,\n      time,\n      title: player.title,\n      content,\n    });\n  }\n  return {\n    lines,\n    players: values(players),\n  };\n}\n\nexport function parseAndGroup(source: string): GroupResult {\n  const parseResult: ParseResult = parseChat(source);\n  return groupByPlayers(parseResult);\n}\n","import React, { useState, useContext } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport {\n  useStepperStyles,\n  AlertDialog,\n  AlertDialogControl,\n  StartStepProps,\n  Configuration,\n  configContext,\n} from 'common';\nimport { parseAndGroup } from './group';\nimport { analyse, AnalyseResult } from './analyse';\n\nexport type StepSourceResult = AnalyseResult;\n\ntype StepSourceProps = StartStepProps<StepSourceResult, Configuration>;\n\n\nfunction processResult(text: string): AnalyseResult | undefined {\n  const groupResult = parseAndGroup(text);\n  if (groupResult.players.length === 0 || groupResult.lines.length === 0) {\n    return undefined;\n  }\n  return analyse(groupResult);\n}\n\nexport const StepSource: React.FC<StepSourceProps> = (props: StepSourceProps) => {\n  const { onNextStep } = props;\n  const config: Configuration = useContext<Configuration>(configContext);\n  const stepperClasses = useStepperStyles();\n  const [text, setText] = useState<string>('');\n\n  const [alertControl, setAlertControl] = useState<AlertDialogControl>({\n    open: false,\n  });\n\n  if (!props.show)\n    return null;\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"原文\"\n          placeholder=\"把原文粘贴到这里，然后点击下一步。\"\n          variant=\"outlined\"\n          multiline\n          fullWidth\n          rows={10}\n          className='Source-textfield'\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n            setText(event.target.value);\n          }}\n          value={text}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={text.length < 5}\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            const result = processResult(text);\n            if (result == null) {\n              setAlertControl({\n                open: true,\n                body: '无法从这段记录中找到可识别的部分！请检查后再试一次吧！',\n              });\n            } else {\n              onNextStep(result, config);\n            }\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n      <AlertDialog\n        onClose={(): void => setAlertControl({\n          ...alertControl,\n          open: false,\n        })}\n        {...alertControl}\n      />\n    </Grid>\n  );\n};\n","export function regularizeQuotes(lines: string[]): string[] {\n  const inQuoteChars: string[] = ['\"', '“', '”'];\n  const outQuoteChars: string[] = ['“', '”'];\n  let now = 1;\n\n  function regularizeQuotesLine(line: string): string {\n    return line.split('').map((ch: string) => {\n      if (inQuoteChars.includes(ch)) {\n        now = 1 - now;\n        return outQuoteChars[now];\n      }\n      return ch;\n    }).join('');\n  }\n\n  return lines.map(regularizeQuotesLine);\n}\n","import React, { useState, useRef, useContext } from 'react';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\nimport {\n  ColorPalette,\n  PaletteInfo,\n  colorPalettes,\n} from 'common';\nimport { DescribedColor } from 'common/colors';\n\ninterface PaletteSwitchProps {\n  value: ColorPalette;\n  setValue: (value: ColorPalette) => void;\n  className?: string;\n}\n\nconst useStyles = makeStyles((/*theme: Theme*/) =>\n  createStyles({\n    outerButton: {\n      marginLeft: 10,\n    },\n    paper: {\n      display: 'flex',\n      flexDirection: 'row',\n      background: '#f5f5f5',\n    },\n    menu: {\n      flex: '100pt 0 0',\n    },\n    descriptionBox: {\n      display: 'flex',\n      flexDirection: 'column',\n      fontSize: 'medium',\n      overflowX: 'hidden',\n    },\n    descriptionText: {\n      flex: '80pt 1 0',\n      padding: 20,\n    },\n    descriptionDisplay: {\n      flex: '20pt 0 0',\n      height: 20,\n      display: 'inline-flex',\n      background: 'white',\n    },\n    descriptionDisplayCell: {\n      flex: '1',\n      height: 20,\n    },\n  }),\n);\n\nexport const PaletteSwitch: React.FC<PaletteSwitchProps> = (props: PaletteSwitchProps) => {\n  const { value, setValue, className } = props;\n  const classes = useStyles();\n  const [dialogOpen, setDialogOpen] = React.useState<boolean>(false);\n  const [dialogSelect, setDialogSelect] = React.useState<ColorPalette>(Object.values(colorPalettes)[0].id);\n\n  const current = colorPalettes[value];\n\n  const handleOpenDialog = () => {\n    setDialogOpen(true);\n    setDialogSelect(value);\n  }\n\n  const handleConfirmDialog = () => {\n    setDialogOpen(false);\n    setValue(dialogSelect);\n  }\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  }\n\n  return (\n    <div className={className}>\n      当前配色方案：{current.name}\n      <Button\n        color=\"secondary\"\n        size=\"small\"\n        variant=\"contained\"\n        onClick={handleOpenDialog}\n        className={classes.outerButton}\n      >\n        切换\n      </Button>\n      <Dialog\n        open={dialogOpen}\n        onClose={handleCloseDialog}\n      >\n        <DialogTitle>更换配色方案</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            你当前的配色方案是“{current.name}”。<br />\n          </DialogContentText>\n          <Paper className={classes.paper}>\n            <MenuList className={classes.menu}>\n              {Object.values(colorPalettes).map((palette: PaletteInfo) => (\n                <MenuItem\n                  key={palette.id}\n                  selected={palette.id == dialogSelect}\n                  onClick={() => { setDialogSelect(palette.id); }}\n                >\n                  {palette.name}\n                </MenuItem>\n              ))}\n            </MenuList>\n            <div className={classes.descriptionBox}>\n              <div className={classes.descriptionText}>\n                {colorPalettes[dialogSelect].description}\n              </div>\n              <div className={classes.descriptionDisplay}>\n                {Object.values(colorPalettes[dialogSelect].contents()).map((color: DescribedColor) => (\n                  <div key={color.value} className={classes.descriptionDisplayCell} style={{ background: color.value }} />\n                ))}\n              </div>\n            </div>\n          </Paper>\n          <DialogContentText>\n            更换配色方案后，所有现有配色设置将重置。\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleConfirmDialog} color=\"primary\" variant=\"contained\" disabled={dialogSelect == value}>\n            确认更换\n          </Button>\n          <Button onClick={handleCloseDialog} color=\"secondary\">\n            不了\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useState, useRef, useContext } from 'react';\nimport Color from 'color';\nimport memoize from 'fast-memoize';\n\nimport fromPairs from 'lodash/fromPairs';\nimport mapValues from 'lodash/mapValues';\nimport reverse from 'lodash/reverse';\nimport uniq from 'lodash/uniq';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Select from '@material-ui/core/Select';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { regularizeQuotes } from './postprocesses';\n\nimport {\n  useStepperStyles,\n  MiddleStepProps,\n  configContext,\n  Configuration,\n  PlayerConfig,\n  GeneralConfig,\n  ColorPalette,\n  PaletteInfo,\n  colorPalettes,\n} from 'common';\nimport {\n  AnalysedLine,\n  AnalysedPlayer,\n  StepSourceResult,\n} from 'step-source';\nimport { DescribedColor } from 'common/colors';\nimport { PaletteSwitch } from './PaletteSwitch';\nimport { renderContent, RendererId, RenderingScheme, renderingSchemes, RendereeLine } from 'common/renderers';\nimport { defaultGeneralConfig } from 'common/configs';\n\nexport interface StepConfigResult {\n  lines: AnalysedLine[];\n}\n\ninterface PlayerConfigProps {\n  name: string;\n  color: string;\n  enabled: boolean;\n  palette: Record<string, DescribedColor>;\n  setName: (value: string) => void;\n  setColor: (value: string) => void;\n  setEnabled: (value: boolean) => void;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    PlayerConfig: {\n    },\n    Center: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n  }),\n);\n\nconst PlayerConfigDashboard: React.FC<PlayerConfigProps> = (props: PlayerConfigProps) => {\n  const { enabled, setEnabled, name, setName, color, setColor, palette } = props;\n  const classes = useStyles();\n  return (\n    <Grid item xs={6}>\n      <Grid container>\n        <Grid item xs={8}>\n          <TextField\n            defaultValue={props.name}\n            variant=\"outlined\"\n            fullWidth\n            onBlur={(event: React.FocusEvent<HTMLInputElement>): void => {\n              setName(event.target.value || '');\n            }}\n          />\n        </Grid>\n        <Grid item xs={4} className={classes.Center}>\n          <Grid container>\n            <FormGroup row className={classes.Center}>\n              <FormControl>\n                <Switch\n                  checked={enabled}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void => {\n                    setEnabled(checked);\n                  }}\n                  value=\"primary\"\n                />\n              </FormControl>\n              <FormControl style={enabled ? {} : { visibility: 'hidden' }}>\n                <Select\n                  style={{\n                    backgroundColor: color,\n                    color: Color(color).isLight() ? 'black' : 'white',\n                    padding: '4px 0px',\n                    textAlign: 'center',\n                  }}\n                  native\n                  value={color}\n                  onChange={(event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n                    setColor(event.target.value as string);\n                  }}\n                >\n                  {Object.values(palette).map((paletteColor: DescribedColor): React.ReactNode => {\n                    const { value, name, isLight } = paletteColor;\n                    return (\n                      <option\n                        key={value}\n                        value={value}\n                        style={{\n                          backgroundColor: value,\n                          color: isLight ? 'black' : 'white',\n                          textAlign: 'center',\n                        }}\n                      >\n                        {name || value}\n                      </option>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\ninterface StepConfigPlayersProps {\n  players: Record<string, ConfigPlayer>;\n  setPlayer: (id: string, value: ConfigPlayer) => void;\n  palette: Record<string, DescribedColor>;\n}\n\nconst StepConfigPlayers: React.FC<StepConfigPlayersProps> = (props: StepConfigPlayersProps) => {\n  const { players, setPlayer, palette } = props;\n  return (\n    <Grid container style={{ overflowY: 'auto' }}>\n      {Object.values(players).map((player: ConfigPlayer) => {\n        return (\n          <PlayerConfigDashboard\n            key={player.id}\n            name={player.name}\n            setName={(value: string): void => {\n              setPlayer(player.id, {\n                ...player,\n                name: value,\n              });\n            }}\n            enabled={player.enabled}\n            setEnabled={(value: boolean): void => {\n              setPlayer(player.id, {\n                ...player,\n                enabled: value,\n              });\n            }}\n            color={player.color}\n            setColor={(value: string): void => {\n              setPlayer(player.id, {\n                ...player,\n                color: value,\n              });\n            }}\n            palette={palette}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n\n\nconst useConfigStyles = makeStyles((/*theme: Theme*/) =>\n  createStyles({\n    PaletteSwitch: {\n      marginBottom: 10,\n      marginTop: 20,\n    },\n    RendererSelect: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: 20,\n    },\n    RendererDescription: {\n      fontSize: '90%',\n      color: 'gray',\n    },\n    RendererPreview: {\n      padding: '0px 13px',\n      border: '1px solid #000000de',\n      borderRadius: 4,\n    },\n  }),\n);\n\ninterface StepConfigGeneralProps {\n  value: GeneralConfig;\n  setValue: (value: GeneralConfig) => void;\n  setPalette: (value: ColorPalette) => void;\n  className?: string;\n}\n\nconst StepConfigGeneral: React.FC<StepConfigGeneralProps> = (props: StepConfigGeneralProps) => {\n  const { value, setValue, setPalette, className } = props;\n  const classes = useConfigStyles();\n\n  return (\n    <FormGroup className={className}>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={value.removeLinesStartedWithParenthesis}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithParenthesis: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以(（开头的行\"\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={value.removeLinesStartedWithDot}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithDot: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以.。开头的行\"\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={value.removeLinesStartedWithLenticular}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithLenticular: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以【开头的行\"\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={value.regularizeQuotes}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                regularizeQuotes: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"自动纠正前后引号\"\n      />\n      <PaletteSwitch\n        value={value.palette}\n        setValue={setPalette}\n        className={classes.PaletteSwitch}\n      />\n    </FormGroup>\n  );\n};\n\ninterface StepConfigRendererProps {\n  lines: AnalysedLine[];\n  players: Record<string, ConfigPlayer>;\n  schemeId: RendererId;\n  paletteId: ColorPalette;\n  setScheme: (value: RendererId) => void;\n  className?: string;\n}\n\nfunction getFirstLines(lines: AnalysedLine[]): AnalysedLine[] {\n  const visited: Record<string, boolean> = {};\n  const result: AnalysedLine[] = [];\n  lines.forEach((line: AnalysedLine) => {\n    if (!visited[line.playerId]) {\n      result.push(line);\n      visited[line.playerId] = true;\n    }\n  });\n  return result;\n}\n\ntype GetFirstLines = (lines: AnalysedLine[]) => AnalysedLine[];\n\nconst StepConfigRenderer: React.FC<StepConfigRendererProps> = (props: StepConfigRendererProps) => {\n  const { players, schemeId, setScheme, className } = props;\n  const memoizedGetFirstLines = useRef(memoize(getFirstLines)).current;\n  const classes = useConfigStyles();\n\n  const options = Object.values(renderingSchemes).filter((scheme: RenderingScheme) =>\n    props.paletteId == 'v2' ? scheme.allowNewPalette : true);\n\n  const firstLines = memoizedGetFirstLines(props.lines)\n    .filter((line: AnalysedLine) => players[line.playerId].enabled)\n    .map((line: AnalysedLine) => ({\n      content: line.content,\n      playerName: players[line.playerId]?.name ?? '错误',\n      playerColor: players[line.playerId]?.color ?? 'black',\n    }));\n  const scheme: RenderingScheme = renderingSchemes[schemeId];\n\n  return (\n    <div className={className}>\n      <div className={classes.RendererSelect}>\n        排版格式：\n        <FormControl variant=\"outlined\">\n          <Select\n            value={schemeId}\n            onChange={(change: React.ChangeEvent<{ name?: string; value: unknown }>, child: React.ReactNode) => {\n              const newValue = change.target.value as string;\n              if (newValue in renderingSchemes) {\n                setScheme(newValue as RendererId);\n              }\n            }}\n          >\n            {options.map((scheme: RenderingScheme) => (\n              <MenuItem value={scheme.id}>{scheme.name}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </div>\n      <div className={classes.RendererDescription}>\n        {scheme.description}\n      </div>\n      <div className={classes.RendererPreview}>\n        {renderContent(firstLines, scheme, true)}\n      </div>\n    </div>\n  );\n}\n\ntype StepConfigProps = MiddleStepProps<StepSourceResult, StepConfigResult, Configuration>;\n\ninterface ConfigPlayer {\n  id: string;\n  name: string;\n  nameCandidates: string[];\n  color: string;\n  enabled: boolean;\n}\n\nfunction initializePlayers(\n  analysePlayers: AnalysedPlayer[],\n  playerConfigs: Record<string, PlayerConfig>,\n  colors: Record<string, DescribedColor>,\n): Record<string, ConfigPlayer> {\n  const availableColors = {...colors};\n  const result = analysePlayers.map((source: AnalysedPlayer) => {\n    const existingConfig = playerConfigs[source.playerId];\n    const sourceNames = reverse(Array.from(source.names));\n    const playerResult: ConfigPlayer = existingConfig != null ? {\n      id: source.playerId,\n      name: existingConfig.displayName,\n      nameCandidates: uniq([existingConfig.displayName, ...sourceNames]),\n      color: existingConfig.color,\n      enabled: existingConfig.enabled,\n    } : {\n      id: source.playerId,\n      name: sourceNames[0],\n      nameCandidates: sourceNames,\n      color: '',\n      enabled: true,\n    };\n    if (!(playerResult.color in colors)) {\n      const color = Object.keys(availableColors)[0];\n      playerResult.color = color;\n    }\n    delete availableColors[playerResult.color];\n    return playerResult;\n  });\n  return fromPairs(result.map((player: ConfigPlayer) => [player.id, player]));\n}\n\nfunction postProcess(lines: AnalysedLine[], generalConfig: GeneralConfig): AnalysedLine[] {\n  let resultLines: AnalysedLine[] = lines;\n  if (generalConfig.removeLinesStartedWithParenthesis) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['（', '('].includes(line.content[0][0]);\n    });\n  }\n  if (generalConfig.removeLinesStartedWithDot) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['。', '.'].includes(line.content[0][0]);\n    });\n  }\n  if (generalConfig.removeLinesStartedWithLenticular) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['【'].includes(line.content[0][0]);\n    });\n  }\n  if (generalConfig.regularizeQuotes) {\n    resultLines = resultLines.map((line: AnalysedLine) => ({\n      ...line,\n      content: regularizeQuotes(line.content),\n    }));\n  }\n  return resultLines;\n};\n\nexport const StepConfig: React.FC<StepConfigProps> = (props: StepConfigProps) => {\n  const { args, onPrevStep, onNextStep } = props;\n\n  const config = useContext<Configuration>(configContext);\n  const stepperClasses = useStepperStyles();\n  const [generalConfig, setGeneralConfig] = useState<GeneralConfig>(\n    () => config.general || {},\n  );\n  const palette = colorPalettes[generalConfig.palette];\n  const [players, setPlayers] = useState<Record<string, ConfigPlayer>>(\n    initializePlayers(args.players, config.players, palette.contents()),\n  );\n\n  function setPlayer(id: string, value: ConfigPlayer): void {\n    setPlayers({ ...players, [id]: value });\n  }\n\n  function handleSetPalette(value: ColorPalette): void {\n    const schemePaletteConflict = value == 'v2' &&\n      !renderingSchemes[generalConfig.rendererScheme].allowNewPalette;\n    const newSchemeId = schemePaletteConflict ?\n      defaultGeneralConfig.rendererScheme :\n      generalConfig.rendererScheme;\n\n    setGeneralConfig({\n      ...generalConfig,\n      palette: value,\n      rendererScheme: newSchemeId,\n    });\n    const palette = colorPalettes[value];\n    setPlayers(initializePlayers(args.players, config.players, palette.contents()));\n  }\n\n  function handleSetRenderer(value: RendererId): void {\n    setGeneralConfig({ ...generalConfig, rendererScheme: value });\n  }\n\n  if (!props.show)\n    return null;\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <StepConfigGeneral\n          value={generalConfig}\n          setValue={setGeneralConfig}\n          setPalette={handleSetPalette}\n        />\n        <StepConfigPlayers\n          players={players}\n          setPlayer={setPlayer}\n          palette={palette.contents()}\n        />\n        <StepConfigRenderer\n          lines={args.lines}\n          players={players}\n          setScheme={handleSetRenderer}\n          schemeId={generalConfig.rendererScheme}\n          paletteId={generalConfig.palette}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={onPrevStep}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            onNextStep(\n              {\n                lines: postProcess(args.lines, generalConfig),\n              },\n              {\n                players: mapValues(players, (player: ConfigPlayer): PlayerConfig => ({\n                  displayName: player.name,\n                  color: player.color,\n                  enabled: player.enabled,\n                })),\n                general: generalConfig,\n              },\n            );\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useState } from 'react';\nimport SVGInline from 'react-svg-inline';\nimport preval from 'preval.macro';\n\nimport GithubIcon from 'simple-icons/icons/github';\n\nimport { makeStyles, createStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport './index.css';\nimport './App.css';\nimport { StepSource, StepSourceResult } from 'step-source';\nimport { StepConfig, StepConfigResult } from 'step-config';\nimport { StepRender } from 'step-render';\nimport {\n  MultiStep,\n  ConfigStorage,\n  configContext,\n  Configuration,\n  realConfigStorage,\n} from 'common';\nimport { sanitizeConfig } from 'common/configs';\n\nconst useHeaderStyles = makeStyles(() =>\n  createStyles({\n    logo: {\n      marginRight: 15,\n      backgroundColor: 'white',\n    },\n    horizontalFill: {\n      flex: '1 0 auto',\n    },\n    toolbarIcon: {\n      height: 24,\n      width: 24,\n      fill: 'white',\n    },\n  }),\n);\n\ninterface HeaderProps {\n  repoUrl: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ repoUrl }: HeaderProps) => {\n  const classes = useHeaderStyles();\n  return (\n    <AppBar position='fixed'>\n      <Toolbar>\n        <Avatar alt=\"Logo\" src=\"/android-chrome-512x512.png\" className={classes.logo} />\n        <Typography variant=\"h6\" className={classes.horizontalFill}>\n          DK的跑团记录着色器\n        </Typography>\n        <IconButton\n          aria-label=\"GitHub\"\n          href={repoUrl}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <SVGInline\n            svg={GithubIcon.svg}\n            className={classes.toolbarIcon}\n          />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\ninterface MainProps {\n  configStorage: ConfigStorage;\n}\n\nconst Main: React.FC<MainProps> = (props: MainProps) => {\n  const { configStorage } = props;\n  const [config, setConfig] = useState<Configuration>((): Configuration => {\n    return sanitizeConfig(configStorage.load());\n  });\n  const ConfigProvider = configContext.Provider;\n  const saveConfig = (value: Configuration): void => {\n    setConfig(value);\n    configStorage.save(value);\n  };\n  return (\n    <ConfigProvider value={config}>\n      <MultiStep<StepSourceResult, StepConfigResult, Configuration>\n        step1={StepSource}\n        step2={StepConfig}\n        step3={StepRender}\n        initConfig={(): Configuration => config}\n        saveConfig={saveConfig}\n      />\n    </ConfigProvider>\n  );\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#795548',\n    },\n    secondary: {\n      main: '#00897b',\n    },\n  },\n});\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"root\">\n        <Header\n          repoUrl='https://github.com/dkwingsmt/log-painter'\n        />\n        <Container maxWidth='md' className='Body-container'>\n          <Main\n            configStorage={realConfigStorage}\n          />\n        </Container>\n        <p\n          style={{\n            textAlign: 'center',\n            marginTop: 100,\n            color: '#dddddd',\n            fontSize: 'small',\n          }}\n        >\n            最后更新时间：{preval`module.exports = new Date().toLocaleDateString(\"zh-cn\", {dateStyle: \"full\"})`}\n        </p>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'web';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Color from 'color';\n\nimport fromPairs from 'lodash/fromPairs';\nimport once from 'lodash/once';\n\nexport interface DescribedColor {\n  value: string;\n  name?: string;\n  isLight: boolean;\n}\n\ninterface RawColor {\n  value: string;\n  name: string;\n}\n\nfunction initializeColors(rawData: RawColor[]): Record<string, DescribedColor> {\n  return fromPairs(rawData.map(\n    ({ value, ...others }) => [value, {\n      ...others,\n      value,\n      isLight: Color(value).isLight(),\n    }],\n  ));\n}\n\nconst rawBbsColors = [\n  { value: \"black\", name: \"黑色\" },\n  { value: \"silver\", name: \"灰色\" },\n  { value: \"red\", name: \"红色\" },\n  { value: \"green\", name: \"绿色\" },\n  { value: \"orange\", name: \"橘色\" },\n  { value: \"purple\", name: \"紫色\" },\n  { value: \"teal\", name: \"蓝绿\" },\n  { value: \"fuchsia\", name: \"桃红\" },\n  { value: \"yellow\", name: \"黄色\" },\n  { value: \"beige\", name: \"米色\" },\n  { value: \"brown\", name: \"棕色\" },\n  { value: \"navy\", name: \"深蓝\" },\n  { value: \"maroon\", name: \"紫红\" },\n  { value: \"limegreen\", name: \"莱姆\" },\n  { value: \"white\", name: \"白色\" },\n  { value: \"brown\", name: \"棕色\" },\n  { value: \"blue\", name: \"蓝色\" },\n  { value: \"pink\", name: \"粉红\" },\n];\n\nconst rawV2Colors = [\n  { value: \"black\", name: \"黑色\" },\n  { value: \"silver\", name: \"银灰\" },\n  { value: \"#634200\", name: \"深褐\" },\n  { value: \"#e39700\", name: \"暗橙\" },\n  { value: \"#d4e300\", name: \"金色\" },\n  { value: \"#1ee300\", name: \"草绿\" },\n  { value: \"#26067d\", name: \"靛色\" },\n  { value: \"#c20cf0\", name: \"蓝紫\" },\n  { value: \"#fc6d0d\", name: \"阳橙\" },\n  { value: \"#0dfccc\", name: \"蓝绿\" },\n  { value: \"#095157\", name: \"暗岩灰\" },\n  { value: \"#8a0e1e\", name: \"暗红\" },\n  { value: \"#e31717\", name: \"鲜红\" },\n  { value: \"#1717e3\", name: \"蓝色\" },\n  { value: \"#fc1956\", name: \"樱桃红\" },\n  { value: \"#bd1c72\", name: \"品红\" },\n  { value: \"#b06635\", name: \"锗黄\" },\n  { value: \"#315723\", name: \"暗绿\" },\n  { value: \"#bda855\", name: \"暗卡其\" },\n  { value: \"#9a55bd\", name: \"中蓝紫\" },\n  { value: \"#5ebd5e\", name: \"叶绿\" },\n  { value: \"#65a8c9\", name: \"灰蓝\" },\n  { value: \"#6b88d6\", name: \"矢车菊蓝\" },\n  { value: \"#68bdac\", name: \"中碧蓝\" },\n  { value: \"#575034\", name: \"咖啡\" },\n  { value: \"#d68c81\", name: \"玫瑰褐\" },\n  { value: \"#3d4057\", name: \"普鲁士蓝\" },\n  { value: \"#bd84a2\", name: \"火鹤红\" },\n  { value: \"#574141\", name: \"暗灰\" },\n  { value: \"#ebf0d8\", name: \"米黄\" },\n  { value: \"#eae3fc\", name: \"薰衣草紫\" },\n];\n\nexport type ColorPalette = 'bbs' | 'v2';\n\nexport interface PaletteInfo {\n  id: ColorPalette;\n  name: string;\n  description: string;\n  contents: () => Record<string, DescribedColor>,\n}\n\nexport const colorPalettes: Record<ColorPalette, PaletteInfo> = {\n  'v2': {\n    id: 'v2',\n    name: '色板v2（推荐）',\n    description: '“色板v2”包括31个精心挑选的颜色，增强了色彩间的对比度以及与白色背景的对比度，缺点是无法输出至BBS代码。',\n    contents: once(() => initializeColors(rawV2Colors)),\n  },\n  'bbs': {\n    id: 'bbs',\n    name: 'BBS颜色',\n    description: '“BBS色板”包含18个常见于BBS的颜色，是传统的配色方案，缺点是色彩间的区分度及与背景的对比度无法保证。',\n    contents: once(() => initializeColors(rawBbsColors)),\n  },\n}\n"],"sourceRoot":""}