{"version":3,"sources":["web/StepResult.tsx","common.ts","web/AlertDialog.tsx","parser/analyse.ts","parser/parser_chat.ts","parser/group.ts","web/StepSource.tsx","web/StepConfig.tsx","web/MultiStep.tsx","web/App.tsx","serviceWorker.ts","index.tsx","web/App-classes.ts","web/storage.ts"],"names":["useStyles","makeStyles","createStyles","Output","fontFamily","fontSize","padding","borderColor","borderStyle","borderWidth","borderRadius","maxHeight","overflowY","margin","StepResult","props","initState","onPrevStep","onRestart","stepperClasses","useStepperStyles","classes","oldConfig","useRef","playersConfig","config","players","useState","lines","generalConfig","resultLines","getGeneralConfig","filter","line","includes","content","processLines","general","processedLines","open","snackbarControl","setSnackbarControl","console","log","alertOnSnackbar","body","result","ClipboardJS","target","element","document","getElementById","Error","on","setImmediate","e","error","clipboard","useEffect","destroy","show","container","className","Container","item","xs","Body","onDoubleClick","selection","window","getSelection","range","createRange","selectNode","removeAllRanges","addRange","id","style","float","marginTop","map","paragraphId","playerId","player","current","enabled","key","color","displayName","contentLine","contentId","concat","justify","Control","variant","ControlButton","onClick","saveConfig","backgroundColor","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","trace","message","defaultGeneralConfig","removeLinesStartedWithParenthesis","removeLinesStartedWithDot","removeLinesStartedWithLenticular","presetDescribedColors","value","name","others","isLight","Color","AlertDialog","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","presetColors","findFirstPlayerConfig","configPlayers","playerIdGroup","findFirstUnusedPresetColor","currentPlayers","existingColors","forEach","find","removeSystemTextConverter","logLine","withdrawParser","withdrawMemberParser","withdrawMember2Parser","commonFriendsParser","joinMemberParser","inviteMemberParser","end","length","some","toMatch","exec","slice","regNumber","regTitle","regTime","removeMessageManagerSystemTextConverter","dateParser","RegExp","source","defaultConverter","trim","splice","trimNumber","src","exportFromLog","headerParser","regDateName","matches","time","number","logLineConverter","copyFromSideWindow","regDateTime","title","flow","copyFromChat","copyFromMessageManager","copyFromMobile","getPlayerIdGroup","ids","push","parseAndGroup","logLines","parsedLine","majorPlayerId","allPlayerIds","values","groupByPlayers","data","firstLogConfig","undefined","parsedHeader","logConfig","currentLogLine","split","compact","parseChat","StepSource","onNextStep","text","setText","alertControl","setAlertControl","Grid","TextField","label","placeholder","multiline","fullWidth","rows","onChange","event","disabled","groupResult","processResult","PlayerConfig","Center","display","alignItems","defaultValue","onBlur","setName","FormGroup","row","FormControl","Switch","checked","setEnabled","visibility","Select","native","setColor","describedColor","StepConfigPlayers","playerIds","setPlayer","StepConfigGeneral","setValue","FormControlLabel","control","StepConfig","setPlayers","setGeneralConfig","newConfig","MultiStep","onInit1","Step1","step1","onInit2","Step2","step2","onInit3","Step3","step3","session","setSession","initStates","setInitStates","handleRestart","useHeaderStyles","logo","marginRight","horizontalFill","flex","toolbarIcon","height","width","fill","Header","repoUrl","AppBar","position","Toolbar","Avatar","alt","Typography","IconButton","aria-label","href","rel","svg","GithubIcon","Main","analysedResult","grouped","currentConfig","configPlayer","nextConfig","analyse","loadConfig","theme","createMuiTheme","palette","primary","main","secondary","App","ThemeProvider","maxWidth","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","_theme","marginLeft","emptyConfiguration","Store","get","set"],"mappings":"sTA2BMA,EAAYC,aAAW,kBAC3BC,YAAa,CACXC,OAAQ,CACNC,WAAY,2BACZC,SAAU,GACVC,QAAS,YAETC,YAAa,YACb,UAAW,CACTA,YAAa,aAEfC,YAAa,QACbC,YAAa,EACbC,aAAc,EACdC,UAAW,IACXC,UAAW,SAEX,QAAS,CACPC,OAAQ,iBA+BHC,EAAwC,SAACC,GAA4B,IACxEC,EAAqCD,EAArCC,UAAWC,EAA0BF,EAA1BE,WAAYC,EAAcH,EAAdG,UACzBC,EAAiBC,cACjBC,EAAUrB,IACVsB,EAAYC,iBAAsBP,EAAUM,WAC5CE,EAAgBD,iBAAqCP,EAAUS,OAAOC,SAAW,IALR,EAMtDC,oBAAyB,WAChD,OAhCiB,SAACC,EAAuBC,GAC3C,IAAIC,EAA8BF,EAgBlC,OAfIG,YAAiBF,EAAe,uCAClCC,EAAcA,EAAYE,QAAO,SAACC,GAChC,OAAQ,CAAC,SAAK,KAAKC,SAASD,EAAKE,QAAQ,GAAG,QAG5CJ,YAAiBF,EAAe,+BAClCC,EAAcA,EAAYE,QAAO,SAACC,GAChC,OAAQ,CAAC,SAAK,KAAKC,SAASD,EAAKE,QAAQ,GAAG,QAG5CJ,YAAiBF,EAAe,sCAClCC,EAAcA,EAAYE,QAAO,SAACC,GAChC,OAAQ,CAAC,UAAKC,SAASD,EAAKE,QAAQ,GAAG,QAGpCL,EAeEM,CAAapB,EAAUY,MAAOZ,EAAUS,OAAOY,SAAW,OAD5DC,EANwE,sBASjCX,mBAA0B,CACtEY,MAAM,IAVuE,mBASxEC,EATwE,KASvDC,EATuD,KAY/EC,QAAQC,IAAIH,GACZ,IAAMI,EAAkB,SAACC,GACvBJ,EAAmB,CAAEI,OAAMN,MAAM,KAd4C,EAgB3DZ,oBAAsB,WACxC,IAAMmB,EAAsB,IAAIC,IAAY,oBAAqB,CAC/DC,OAAQ,WACN,IAAMC,EAA0BC,SAASC,eAAe,eACxD,GAAe,MAAXF,EAEF,MADAL,EAAgB,4EACV,IAAIQ,MAAM,8CAElB,OAAOH,KAUX,OAPAH,EAAOO,GAAG,WAAW,WACnBC,GAAa,kBAAMV,EAAgB,0DAErCE,EAAOO,GAAG,SAAS,SAACE,GAClBX,EAAgB,0GAChBF,QAAQc,MAAMD,MAETT,KAlBFW,EAhBwE,oBA2C/E,OANAC,qBAAU,WACR,OAAO,WACLD,EAAUE,cAIT5C,EAAM6C,KAIT,kBAAC,IAAD,CAAMC,WAAS,EAACC,UAAW3C,EAAe4C,WACxC,kBAAC,IAAD,CACEC,MAAI,EACJC,GAAI,GACJH,UAAW3C,EAAe+C,MAE1B,yBACEJ,UAAWzC,EAAQlB,OACnBgE,cAAe,WACb,IAAMC,EAAYC,OAAOC,eACzB,GAAKF,EAAL,CAEA,IAAMnB,EAAUC,SAASC,eAAe,eACxC,GAAKF,EAAL,CAEA,IAAMsB,EAAQrB,SAASsB,cACvBD,EAAME,WAAWxB,GACjBmB,EAAUM,kBACVN,EAAUO,SAASJ,MAErBK,GAAG,eAEH,kBAAC,IAAD,CACEC,MAAO,CACLC,MAAO,QACPC,WAAY,IAEdH,GAAG,oBAEH,kBAAC,IAAD,OAEDtC,EAAe0C,KAAI,SAAC/C,EAAoBgD,GAAyB,IACxDC,EAAsBjD,EAAtBiD,SAAU/C,EAAYF,EAAZE,QACZgD,EAAS3D,EAAc4D,QAAQF,GACrC,OAAKC,EAAOE,QAGV,uBACEC,IAAKL,EACLJ,MAAO,CACLU,MAAOJ,EAAOI,QAHlB,WAMOJ,EAAOK,YANd,MAOGrD,EAAQ6C,KAAI,SAACS,EAAqBC,GAEjC,OAD8B,IAAdA,EAAkB,GAAK,CAAC,wBAAIJ,IAAG,aAAQI,OACxCC,OAAO,CAAC,0BAAML,IAAKI,GAAYD,SAX3C,UAkBf,kBAAC,IAAD,CAAMzB,MAAI,EAACC,GAAI,GAAI2B,QAAQ,WAAW9B,UAAW3C,EAAe0E,SAC9D,kBAAC,IAAD,CACEC,QAAQ,WACRP,MAAM,YACNzB,UAAW3C,EAAe4E,cAC1BC,QAAS,WACPC,YAAW3E,EAAU8D,SACrBnE,MANJ,sBAWA,kBAAC,IAAD,CACE6E,QAAQ,YACRhC,UAAW3C,EAAe4E,cAC1BlB,MAAO,CAAEqB,gBAAiB,WAC1BF,QAAS9E,GAJX,6BASF,kBAAC,IAAD,CACEiF,aAAc,CACZC,SAAU,SACVC,WAAY,QAEd9D,KAAMC,EAAgBD,KACtB+D,iBAAkB,IAClBC,QAAS,WACP7D,QAAQ8D,QACR/D,EAAmB,eACdD,EADa,CAEhBD,MAAM,MAGVkE,QAASjE,EAAgBK,QA3FtB,Q,4PCjFE6D,EAAgD,CAC3DC,mCAAmC,EACnCC,2BAA2B,EAC3BC,kCAAkC,GAGvB9E,EAAmB,SAAgCN,EAAuB6D,GACrF,OAAO7D,EAAO6D,IAAQoB,EAAqBpB,IAchCwB,EAA0C,CACrD,CAAEC,MAAO,QAASC,KAAM,gBACxB,CAAED,MAAO,SAAUC,KAAM,gBACzB,CAAED,MAAO,MAAOC,KAAM,gBACtB,CAAED,MAAO,QAASC,KAAM,gBACxB,CAAED,MAAO,SAAUC,KAAM,gBACzB,CAAED,MAAO,SAAUC,KAAM,gBACzB,CAAED,MAAO,OAAQC,KAAM,gBACvB,CAAED,MAAO,UAAWC,KAAM,gBAC1B,CAAED,MAAO,SAAUC,KAAM,gBACzB,CAAED,MAAO,QAASC,KAAM,gBACxB,CAAED,MAAO,QAASC,KAAM,gBACxB,CAAED,MAAO,OAAQC,KAAM,gBACvB,CAAED,MAAO,SAAUC,KAAM,gBACzB,CAAED,MAAO,YAAaC,KAAM,gBAC5B,CAAED,MAAO,QAASC,KAAM,gBACxB,CAAED,MAAO,QAASC,KAAM,gBACxB,CAAED,MAAO,OAAQC,KAAM,iBACvBhC,KAAI,gBAAG+B,EAAH,EAAGA,MAAUE,EAAb,+CACDA,EADC,CAEJF,QACAG,QAASC,IAAMJ,GAAOG,gB,+SCtCTE,EAzBiC,SAAC,GAA+C,IAA7C7E,EAA4C,EAA5CA,KAAMgE,EAAsC,EAAtCA,QAAS1D,EAA6B,EAA7BA,KAChE,OACE,6BACE,kBAACwE,EAAA,EAAD,CACE9E,KAAMA,EACNgE,QAASA,EACTe,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAACC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAmB9C,GAAG,4BACnB/B,IAGL,kBAAC8E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ5B,QAASO,EAAShB,MAAM,UAAUsC,WAAS,GAAnD,oB,iCCtBJC,EAAyBhB,IAAsB9B,KAAI,qBAAG+B,SAE5D,SAASgB,EACPC,EACAC,GACsB,IAAD,uBACrB,YAAuBA,EAAvB,+CAAsC,CAAC,IAA5B/C,EAA2B,QACpC,GAAI8C,EAAc9C,GAChB,OAAO8C,EAAc9C,IAHJ,kFAKrB,OAAO,KAGT,SAASgD,EACPJ,EACAK,GAEA,IAAMC,EAA0C,GAIhD,OAHAC,IAAQF,GAAgB,SAAChD,GACvBiD,EAAejD,EAAOI,QAAS,KAE1BuC,EAAaQ,MAAK,SAAC/C,GAAD,OAAoB6C,EAAe7C,OAAW,Q,0ECAzE,SAASgD,EAA0BC,GACjC,GAAe,MAAXA,EACF,OAAO,KAWT,IAVA,IAAM5G,EAAQ4G,EAAQrG,QAEhBsG,EAAiB,6EACjBC,EAAuB,qEACvBC,EAAwB,6DACxBC,EAAsB,0GACtBC,EAAmB,qCACnBC,EAAqB,yDAEvBC,EAAMnH,EAAMoH,OAAS,EAClBD,GAAM,GACP,CACF,OACAN,EACAC,EACAC,EACAC,EACAC,EACAC,GACAG,MAAK,SAACC,GAAD,OAAqBA,EAAQC,KAAKvH,EAAMmH,OATjCA,KAehB,OADAP,EAAQrG,QAAUqG,EAAQrG,QAAQiH,MAAM,EAAGL,EAAM,GAC1CP,EAGT,IAAMa,EAAY,sBACZC,EAAW,4BACXC,EAAU,qCAEhB,SAASC,EAAwChB,GAC/C,GAAe,MAAXA,EACF,OAAO,KAYT,IAXA,IAAM5G,EAAQ4G,EAAQrG,QAEhBsH,EAAa,uBACbhB,EAAiB,IAAIiB,OAAJ,WAAeH,EAAQI,OAAvB,kDACjBjB,EAAuB,IAAIgB,OAAJ,WAAeH,EAAQI,OAAvB,sEACvBhB,EAAwB,IAAIe,OAAJ,WAAeH,EAAQI,OAAvB,8DAExBd,EAAmB,IAAIa,OAAJ,WAAeH,EAAQI,OAAvB,sCAGrBZ,EAAMnH,EAAMoH,OAAS,EAClBD,GAAM,GACP,CACF,OACAU,EACAhB,EACAC,EACAC,EACAE,GACAI,MAAK,SAACC,GAAD,OAAqBA,EAAQC,KAAKvH,EAAMmH,OARjCA,KAchB,OADAP,EAAQrG,QAAUqG,EAAQrG,QAAQiH,MAAM,EAAGL,EAAM,GAC1CP,EAGT,SAASoB,EAAiBpB,GACxB,GAAe,MAAXA,EACF,OAAO,KAGT,IAFA,IAAM5G,EAAQ4G,EAAQrG,QAEhBP,EAAMoH,OAAS,GAAyB,KAApBpH,EAAM,GAAGiI,QACjCjI,EAAMkI,OAAO,EAAG,GAElB,KAAMlI,EAAMoH,OAAS,GAAsC,KAAjCpH,EAAMA,EAAMoH,OAAO,GAAGa,QAC9CjI,EAAMkI,OAAOlI,EAAMoH,OAAO,EAAG,GAE/B,OAAqB,IAAjBpH,EAAMoH,OACD,KACFR,EAGT,SAASuB,EAAWC,GAClB,OAAOH,IAAKG,EAAK,QAKnB,IAAMC,GAA2B,CAC/BC,aAAc,SAACjI,GACb,IAAMkI,EAAc,IAAIT,OAAJ,+BAAmCH,EAAQI,SAEzDS,EADY,IAAIV,OAAJ,YAAgBS,EAAYR,OAA5B,kBAA4CN,EAAUM,OAAtD,OACQR,KAAKlH,GAC/B,IAAKmI,EACH,OAAO,KAL0C,kBAMhBA,EANgB,GAMtCC,GANsC,WAOnD,MAAO,CACLlF,OAAQ,CACN6B,KAT+C,KAU/CsD,OAAQP,EAVuC,OAYjDM,SAGJE,iBAAkB,SAAC/B,GACjB,MAAI,CAAC,QAAS,WAAWtG,SAASsG,EAAQrD,OAAOmF,QAAU,IAClD,KACFV,EAAiBpB,KAMtBgC,GAAgC,CACpCN,aAAc,SAACjI,GACb,IAAMwI,EAAc,IAAIf,OAAJ,yCAA6CH,EAAQI,SAEnES,EADY,IAAIV,OAAJ,WAAeJ,EAASK,OAAxB,kBAAwCc,EAAYd,OAApD,OACQR,KAAKlH,GAC/B,IAAKmI,EACH,OAAO,KAL0C,kBAMjBA,EANiB,GAMtCM,GANsC,WAOnD,MAAO,CACLvF,OAAQ,CACN6B,KAT+C,KAU/C0D,SAEFL,KAZiD,OAerDE,iBAAkB,SAAC/B,GACjB,OAAOmC,IACLpC,EACAqB,EAFKe,CAGLnC,KAMAoC,GAA0B,CAC9BV,aAAc,SAACjI,GACb,IACMmI,EADY,IAAIV,OAAJ,WAAeJ,EAASK,OAAxB,iBAAuCJ,EAAQI,OAA/C,OACQR,KAAKlH,GAC/B,IAAKmI,EACH,OAAO,KAJ0C,kBAKjBA,EALiB,GAKtCM,GALsC,WAMnD,MAAO,CACLvF,OAAQ,CACN6B,KAR+C,KAS/C0D,SAEFL,KAXiD,OAcrDE,iBAAkB,SAAC/B,GACjB,OAAOmC,IACLpC,EACAqB,EAFKe,CAGLnC,KAMAqC,GAAoC,CACxCX,aAAc,SAACjI,GACb,IACMmI,EADY,IAAIV,OAAJ,WAAeJ,EAASK,OAAxB,iBAAuCN,EAAUM,OAAjD,cAA6DJ,EAAQI,OAArE,OACQR,KAAKlH,GAC/B,IAAKmI,EACH,OAAO,KAJ0C,kBAKTA,EALS,GAKtCM,GALsC,WAK/B1D,EAL+B,KAKzBsD,EALyB,KAKjBD,EALiB,KAMnD,MAAO,CACLlF,OAAQ,CACN6B,OACA0D,QACAJ,OAAQP,EAAWO,IAErBD,SAGJE,iBAAkB,SAAC/B,GACjB,OAAOmC,IACLnB,EACAI,EAFKe,CAGLnC,KAMAsC,GAA4B,CAChCZ,aAAc,SAACjI,GACb,IACMmI,EADY,qCACQjB,KAAKlH,GAC/B,IAAKmI,EACH,OAAO,KAJ0C,kBAKxBA,EALwB,QAMnD,MAAO,CACLjF,OAAQ,CACN6B,KAR+C,MAUjDqD,KAViD,OAarDE,iBAAkB,SAAC/B,GACjB,OAAOoB,EAAiBpB,KCrO5B,SAASuC,GAAiB5F,GACxB,IAAM6F,EAAgB,GAItB,OAHI7F,EAAOmF,QACTU,EAAIC,KAAJ,aAAe9F,EAAOmF,SACxBU,EAAIC,KAAJ,eAAiB9F,EAAO6B,OACjBgE,EA8BF,SAASE,GAAcvB,GAE5B,OA7BF,SAAwB7G,GACtB,IAAMlB,EAAwB,GACxBF,EAA0C,GAFQ,uBAGxD,YAAyBoB,EAAOqI,SAAhC,+CAA0C,CAAC,IAAhCC,EAA+B,QAChCjG,EAA0BiG,EAA1BjG,OAAQkF,EAAkBe,EAAlBf,KAAMlI,EAAYiJ,EAAZjJ,QAChB8F,EAAgB8C,GAAiB5F,GACjCkG,EAAgBpD,EAAc,GAC/BvG,EAAQ2J,KACX3J,EAAQ2J,GAAiB,CACvBnG,SAAUmG,EACVC,aAAcrD,EACdjB,KAAM7B,EAAO6B,KACbsD,OAAQnF,EAAOmF,SAEnB1I,EAAMqJ,KAAK,CACT/F,SAAUmG,EACVhB,OACAK,MAAOvF,EAAOuF,MACdvI,aAlBoD,kFAqBxD,MAAO,CACLP,QACAF,QAAS6J,IAAO7J,IAMX8J,CDoMF,SAAmBC,GACxB,IAAMN,EAAyB,GAC3BO,OAAwCC,EAFO,uBAGnD,IAHmD,IAGnD,EAHmD,iBAGxC1J,EAHwC,QAI3C2J,EAAgB,WACpB,GAAIF,EACF,OAAOA,EAAexB,aAAajI,GACrC,cAAwB,CACtB4I,GACAC,GACAb,GACAO,GACAI,IALF,eAMG,CANE,IAAMiB,EAAS,KAOZ/I,EAAS+I,EAAU3B,aAAajI,GACtC,GAAIa,EAEF,OADA4I,EAAiBG,EACV/I,EAGX,OAAO,KAhBa,GAkBtB,GAAI8I,EACFT,EAASF,KAAT,eACKW,EADL,CAEEzJ,QAAS,WAGX,GAAIuJ,EAAgB,CAClB,IAAMI,EAAyCX,EAASA,EAASnC,OAAS,GAEtE8C,GACFA,EAAe3J,QAAQ8I,KAAKhJ,KA7BpC,EAAmBwJ,EAAKM,MAAM,MAA9B,+CAAsC,IAHa,kFAuCnD,OAAKL,EAME,CAAEP,SAHiBa,IACxBb,EAASnG,IAAI0G,EAAenB,oBAHrB,CAAEY,SAAU,IC7OYc,CAAUtC,ICrBtC,IAAMuC,GAAwC,SAACnL,GAA4B,IACxEoL,EAAepL,EAAfoL,WACFhL,EAAiBC,cAFwD,EAGvDO,mBAAiB,IAHsC,mBAGxEyK,EAHwE,KAGlEC,EAHkE,OAKvC1K,mBAA6B,CACnEY,MAAM,IANuE,mBAKxE+J,EALwE,KAK1DC,EAL0D,KAS/E,IAAKxL,EAAM6C,KACT,OAAO,KAcT,OACE,kBAAC4I,EAAA,EAAD,CAAM3I,WAAS,EAACC,UAAW3C,EAAe4C,WACxC,kBAACyI,EAAA,EAAD,CAAMxI,MAAI,EAACC,GAAI,GAAIH,UAAW3C,EAAe+C,MAC3C,kBAACuI,EAAA,EAAD,CACE7H,GAAG,iBACH8H,MAAM,eACNC,YAAY,yGACZ7G,QAAQ,WACR8G,WAAS,EACTC,WAAS,EACTC,KAAM,GACNhJ,UAAU,mBACViJ,SAAU,SAACC,GACTX,EAAQW,EAAMhK,OAAO+D,QAEvBA,MAAOqF,KAGX,kBAACI,EAAA,EAAD,CAAMxI,MAAI,EAACC,GAAI,GAAI2B,QAAQ,WAAW9B,UAAW3C,EAAe0E,SAC9D,kBAAC+B,EAAA,EAAD,CACE9B,QAAQ,YACRP,MAAM,UACN0H,SAAUb,EAAKpD,OAAS,EACxBlF,UAAW3C,EAAe4E,cAC1BC,QAAS,WACP,IAAMlD,EArChB,SAAuBsJ,GACrB,IAAMc,EAAchC,GAAckB,GAClC,GAAmC,IAA/Bc,EAAYxL,QAAQsH,QAA6C,IAA7BkE,EAAYtL,MAAMoH,OAO1D,OAAOkE,EANLX,EAAgB,CACdhK,MAAM,EACNM,KAAM,uKAgCasK,CAAcf,GACzBtJ,GACFqJ,EAAWrJ,KARjB,uBAeF,kBAAC,EAAD,eACEyD,QAAS,kBAAYgG,EAAgB,eAChCD,EAD+B,CAElC/J,MAAM,OAEJ+J,M,+ECnDNtM,GAAYC,aAAW,kBAC3BC,YAAa,CACXkN,aAAc,GAEdC,OAAQ,CACNC,QAAS,OACTC,WAAY,eAKZH,GAA4C,SAACrM,GACjD,IAAMM,EAAUrB,KAChB,OACE,kBAACwM,EAAA,EAAD,CAAMxI,MAAI,EAACC,GAAI,GACb,kBAACuI,EAAA,EAAD,CAAM3I,WAAS,GACb,kBAAC2I,EAAA,EAAD,CAAMxI,MAAI,EAACC,GAAI,GACb,kBAACwI,EAAA,EAAD,CACEe,aAAczM,EAAMiG,KACpBlB,QAAQ,WACR+G,WAAS,EACTY,OAAQ,SAACT,GACPjM,EAAM2M,QAAQV,EAAMhK,OAAO+D,OAAS,QAI1C,kBAACyF,EAAA,EAAD,CAAMxI,MAAI,EAACC,GAAI,EAAGH,UAAWzC,EAAQgM,QACnC,kBAACb,EAAA,EAAD,CAAM3I,WAAS,GACb,kBAAC8J,GAAA,EAAD,CAAWC,KAAG,EAAC9J,UAAWzC,EAAQgM,QAChC,kBAACQ,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,QAAShN,EAAMsE,QACf0H,SAAU,SAACC,EAA4Ce,GACrDhN,EAAMiN,WAAWD,IAEnBhH,MAAM,aAGV,kBAAC8G,GAAA,EAAD,CAAahJ,MAAO9D,EAAMsE,QAAU,GAAK,CAAE4I,WAAY,WACrD,kBAACC,GAAA,EAAD,CACErJ,MAAO,CACLqB,gBAAiBnF,EAAMwE,MACvBA,MAAO4B,KAAMpG,EAAMwE,OAAO2B,UAAY,QAAU,QAChD5G,QAAS,GAEX6N,QAAM,EACNpH,MAAOhG,EAAMwE,MACbwH,SAAU,SAACC,GACTjM,EAAMqN,SAASpB,EAAMhK,OAAO+D,SAG7BD,IAAsB9B,KAAI,SAACqJ,GAAqD,IACvEtH,EAAyBsH,EAAzBtH,MAAOC,EAAkBqH,EAAlBrH,KAAME,EAAYmH,EAAZnH,QACrB,OACE,4BACE5B,IAAKyB,EACLA,MAAOA,EACPlC,MAAO,CACLqB,gBAAiBa,EACjBxB,MAAO2B,EAAU,QAAU,UAG5BF,GAAQD,cA2B3BuH,GAAsD,SAACvN,GAAmC,IACtFwN,EAAkCxN,EAAlCwN,UAAW7M,EAAuBX,EAAvBW,QAAS8M,EAAczN,EAAdyN,UAC5B,OACE,kBAAChC,EAAA,EAAD,CAAM3I,WAAS,GACZ0K,EAAUvJ,KAAI,SAACE,GACd,IAAMC,EAASzD,EAAQwD,GACvB,OACE,kBAAC,GAAD,CACEI,IAAKJ,EACL8B,KAAM7B,EAAOK,YACbkI,QAAS,SAAC3G,GACRyH,EAAUtJ,EAAD,eACJC,EADI,CAEPK,YAAauB,MAGjB1B,QAASF,EAAOE,QAChB2I,WAAY,SAACjH,GACXyH,EAAUtJ,EAAD,eACJC,EADI,CAEPE,QAAS0B,MAGbxB,MAAOJ,EAAOI,MACd6I,SAAU,SAACrH,GACTyH,EAAUtJ,EAAD,eACJC,EADI,CAEPI,MAAOwB,aAejB0H,GAAsD,SAAC1N,GAAmC,IACtFgG,EAAoBhG,EAApBgG,MAAO2H,EAAa3N,EAAb2N,SAEf,OACE,kBAACf,GAAA,EAAD,KACE,kBAACgB,GAAA,EAAD,CACEC,QACE,kBAACd,GAAA,EAAD,CACEC,QAAShM,YAAiBgF,EAAO,qCACjCgG,SAAU,SAACC,GACT0B,EAAS,eACJ3H,EADG,CAENJ,kCAAmCqG,EAAMhK,OAAO+K,YAGpDxI,MAAM,YAGVmH,MAAM,sDAER,kBAACiC,GAAA,EAAD,CACEC,QACE,kBAACd,GAAA,EAAD,CACEC,QAAShM,YAAiBgF,EAAO,6BACjCgG,SAAU,SAACC,GACT0B,EAAS,eACJ3H,EADG,CAENH,0BAA2BoG,EAAMhK,OAAO+K,YAG5CxI,MAAM,YAGVmH,MAAM,sDAER,kBAACiC,GAAA,EAAD,CACEC,QACE,kBAACd,GAAA,EAAD,CACEC,QAAShM,YAAiBgF,EAAO,oCACjCgG,SAAU,SAACC,GACT0B,EAAS,eACJ3H,EADG,CAENF,iCAAkCmG,EAAMhK,OAAO+K,YAGnDxI,MAAM,YAGVmH,MAAM,uDAMDmC,GAAyC,SAAC9N,GAA6B,IAC1EC,EAAsCD,EAAtCC,UAAWC,EAA2BF,EAA3BE,WAAYkL,EAAepL,EAAfoL,WACzBhL,EAAiBC,cAF0D,EAGnDO,oBAC5B,kBAAMX,EAAUS,OAAOC,SAAW,MAJ6C,mBAG1EA,EAH0E,KAGjEoN,EAHiE,KAM3EP,EAAYhN,iBAAiBP,EAAUuN,WANoC,EAOvC5M,oBACxC,kBAAMX,EAAUS,OAAOY,SAAW,MAR6C,mBAO1ER,EAP0E,KAO3DkN,EAP2D,KAU3EnN,EAAQL,iBAAuBP,EAAUY,OAK/C,OAAKb,EAAM6C,KAIT,kBAAC4I,EAAA,EAAD,CAAM3I,WAAS,EAACC,UAAW3C,EAAe4C,WACxC,kBAACyI,EAAA,EAAD,CAAMxI,MAAI,EAACC,GAAI,GAAIH,UAAW3C,EAAe+C,MAC3C,kBAAC,GAAD,CACE6C,MAAOlF,EACP6M,SAAUK,IAEZ,kBAAC,GAAD,CACER,UAAWA,EAAUnJ,QACrB1D,QAASA,EACT8M,UAjBR,SAAmB5J,EAAYmC,GAC7B+H,EAAW,eAAKpN,EAAN,gBAAgBkD,EAAKmC,SAmB7B,kBAACyF,EAAA,EAAD,CAAMxI,MAAI,EAACC,GAAI,GAAI2B,QAAQ,WAAW9B,UAAW3C,EAAe0E,SAC9D,kBAAC+B,EAAA,EAAD,CACE9B,QAAQ,WACRP,MAAM,YACNzB,UAAW3C,EAAe4E,cAC1BC,QAAS/E,GAJX,sBAQA,kBAAC2G,EAAA,EAAD,CACE9B,QAAQ,YACRP,MAAM,UACNzB,UAAW3C,EAAe4E,cAC1BC,QAAS,WACPmG,EAAW,CACTvK,MAAOA,EAAMwD,QACb4J,UAAW,CACTtN,UACAW,QAASR,OATjB,wBAxBG,M,UCtIIoN,GAzEG,SAChBlO,GAC+B,IACvBmO,EAAwEnO,EAAxEmO,QAAgBC,EAAwDpO,EAA/DqO,MAAcC,EAAiDtO,EAAjDsO,QAAgBC,EAAiCvO,EAAxCwO,MAAcC,EAA0BzO,EAA1ByO,QAAgBC,EAAU1O,EAAjB2O,MADjC,EAGA/N,mBAAiB,GAHjB,mBAGvBgO,EAHuB,KAGdC,EAHc,OAIMjO,mBAA0B,IAJhC,mBAIvBkO,EAJuB,KAIXC,EAJW,KAMxBC,EAAgB,WACpBH,EAAWD,EAAU,GACrBG,EAAc,CACZZ,OAQJ,OAJ0B,IAAtBW,EAAW7G,QACb+G,IAIA,kBAACvD,EAAA,EAAD,CAAM3I,WAAS,EAACI,GAAI,IACA,MAAjB4L,EAAW,GAAa,KACvB,kBAACV,EAAD,CACE7J,IAAG,UAAKqK,EAAL,MACH/L,KAA4B,IAAtBiM,EAAW7G,OACjBhI,UAAW6O,EAAW,GACtB1D,WAAY,SAACrJ,GACXgN,EAAc,CACZD,EAAW,GACXR,EAAQvM,QAME,MAAjB+M,EAAW,GAAa,KACvB,kBAACP,EAAD,CACEhK,IAAG,UAAKqK,EAAL,MACH/L,KAA4B,IAAtBiM,EAAW7G,OACjBhI,UAAW6O,EAAW,GACtB5O,WAAY,WACV6O,EAAc,CACZD,EAAW,MAGf1D,WAAY,SAACrJ,GACXgN,EAAc,CACZD,EAAW,GACXA,EAAW,GACXL,EAAQ1M,QAME,MAAjB+M,EAAW,GAAa,KACvB,kBAACJ,EAAD,CACEnK,IAAG,UAAKqK,EAAL,MACH/L,KAA4B,IAAtBiM,EAAW7G,OACjBhI,UAAW6O,EAAW,GACtB5O,WAAY,WACV6O,EAAc,CACZD,EAAW,GACXA,EAAW,MAGf3O,UAAW6O,M,SCzEfC,GAAkB/P,aAAW,kBACjCC,YAAa,CACX+P,KAAM,CACJC,YAAa,GACbhK,gBAAiB,SAEnBiK,eAAgB,CACdC,KAAM,YAERC,YAAa,CACXC,OAAQ,GACRC,MAAO,GACPC,KAAM,cASNC,GAAgC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QACjCrP,EAAU2O,KAChB,OACE,kBAACW,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAI,OAAO/G,IAAI,8BAA8BlG,UAAWzC,EAAQ4O,OACxE,kBAACe,EAAA,EAAD,CAAYlL,QAAQ,KAAKhC,UAAWzC,EAAQ8O,gBAA5C,sDAGA,kBAACc,EAAA,EAAD,CACEC,aAAW,SACXC,KAAMT,EACN1N,OAAO,SACPoO,IAAI,uBAEJ,kBAAC,IAAD,CACEC,IAAKC,IAAWD,IAChBvN,UAAWzC,EAAQgP,kBAazBkB,GAA4B,SAACxQ,GACjC,OACE,kBAAC,GAAD,CAOEmO,QAAS,iBAA4B,IACrCE,MAAOlD,GACPmD,QAAS,SAACvM,GACR,IACM0O,ENnDP,SAAiBC,EAAsBC,GAA8C,IAClFhQ,EAAmB+P,EAAnB/P,QAASE,EAAU6P,EAAV7P,MACXoG,EAA8C0J,EAAchQ,SAAW,GACvEyG,EAA+C,GAHoC,uBAIzF,YAAqBzG,EAArB,+CAA8B,CAAC,IAApByD,EAAmB,QACxBwM,EAAe5J,EAAsBC,EAAe7C,EAAOmG,cAC1DqG,IACHA,EAAe,CACbtM,SAAS,EACTG,YAAaL,EAAO6B,KACpBzB,MAAO2C,EAA2BJ,EAAcK,KANxB,2BAS5B,YAAuBhD,EAAOmG,aAA9B,+CAA4C,CAC1CnD,EAD0C,SACfwJ,GAVD,oFAJ2D,kFAiBzF,MAAO,CACL/P,QACA2M,UAAW7M,EAAQsD,KAAI,SAACG,GAAD,OAA4BA,EAAOD,YAC1D0M,WAAW,eACNF,EADK,CAERhQ,QAAQ,eACHsG,EADE,GAEFG,MM2BoB0J,CAAQ/O,EADhBgP,gBAEf,MAAO,CACLlQ,MAAO4P,EAAe5P,MACtB2M,UAAWiD,EAAejD,UAC1B9M,OAAQ+P,EAAeI,aAG3BrC,MAAOV,GACPW,QAAS,SAAC1M,GACR,IAAMxB,EAAYwQ,eAElB,OADA7L,aAAWnD,EAAOkM,WACX,CACLpN,MAAOkB,EAAOlB,MACdH,OAAQqB,EAAOkM,UACf1N,cAGJoO,MAAO5O,QAKPiR,GAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cAoBGE,GAfO,WACpB,OACE,kBAACC,EAAA,EAAD,CAAeP,MAAOA,IACpB,yBAAKjO,UAAU,QACb,kBAAC,GAAD,CACE4M,QAAQ,6CAEV,kBAAC3M,EAAA,EAAD,CAAWwO,SAAS,KAAKzO,UAAU,kBACjC,kBAAC,GAAD,UCpHU0O,QACW,cAA7BnO,OAAOoO,SAASC,UAEe,UAA7BrO,OAAOoO,SAASC,UAEhBrO,OAAOoO,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,GAAD,MAAS3P,SAASC,eAAe,SDoI3C,kBAAmB2P,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCE3InB,wDAEa/R,EAAmBnB,aAAW,SAACmT,GAAD,OACzClT,YAAa,CACX2F,QAAS,CACPyH,QAAS,OACTvI,UAAW,IAEbb,KAAM,GAENH,UAAW,GAEXgC,cAAe,CACbwK,MAAO,IACP8C,WAAY,U,gCCdlB,yFAGMC,EAAoC,CAAE5R,QAAS,IAE9C,SAASoQ,IACd,OAAOyB,IAAMC,IAAI,WAAaF,EAGzB,SAASrN,EAAWxE,GACzB8R,IAAME,IAAI,SAAUhS,M","file":"static/js/main.a1411361.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport ClipboardJS from 'clipboard';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nimport { useStepperStyles } from './App-classes';\nimport { AnalysedLine, Configuration, getGeneralConfig, GeneralConfig, ConfigPlayer } from 'common';\nimport { saveConfig } from './storage';\n\nexport interface StepResultInitState {\n  lines: AnalysedLine[];\n  config: Configuration;\n  oldConfig: Configuration;\n}\n\ninterface StepResultProps {\n  initState: StepResultInitState;\n  onPrevStep: () => void;\n  onRestart: () => void;\n  show: boolean;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    Output: {\n      fontFamily: '微软雅黑',\n      fontSize: 14,\n      padding: '16px 14px',\n\n      borderColor: '#0000003b',\n      '&:hover': {\n        borderColor: '#000000de',\n      },\n      borderStyle: 'solid' ,\n      borderWidth: 1,\n      borderRadius: 4,\n      maxHeight: 200,\n      overflowY: 'scroll',\n\n      '& > p': {\n        margin: '0.5em 0',\n      },\n    },\n  }),\n);\n\nconst processLines = (lines: AnalysedLine[], generalConfig: GeneralConfig): AnalysedLine[] => {\n  let resultLines: AnalysedLine[] = lines;\n  if (getGeneralConfig(generalConfig, 'removeLinesStartedWithParenthesis')) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['（', '('].includes(line.content[0][0]);\n    });\n  }\n  if (getGeneralConfig(generalConfig, 'removeLinesStartedWithDot')) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['。', '.'].includes(line.content[0][0]);\n    });\n  }\n  if (getGeneralConfig(generalConfig, 'removeLinesStartedWithLenticular')) {\n    resultLines = resultLines.filter((line: AnalysedLine) => {\n      return !['【'].includes(line.content[0][0]);\n    });\n  }\n  return resultLines;\n};\n\ninterface SnackbarControl {\n  body?: React.ReactNode;\n  open: boolean;\n}\n\nexport const StepResult: React.FC<StepResultProps> = (props: StepResultProps) => {\n  const { initState, onPrevStep, onRestart } = props;\n  const stepperClasses = useStepperStyles();\n  const classes = useStyles();\n  const oldConfig = useRef<Configuration>(initState.oldConfig);\n  const playersConfig = useRef<Record<string, ConfigPlayer>>(initState.config.players || {});\n  const [processedLines] = useState<AnalysedLine[]>(() => {\n    return processLines(initState.lines, initState.config.general || {});\n  });\n  const [snackbarControl, setSnackbarControl] = useState<SnackbarControl>({\n    open: false,\n  });\n  console.log(snackbarControl);\n  const alertOnSnackbar = (body: React.ReactNode): void => {\n    setSnackbarControl({ body, open: true });\n  };\n  const [clipboard] = useState<ClipboardJS>((): ClipboardJS => {\n    const result: ClipboardJS = new ClipboardJS('#clipboard-button', {\n      target: (): Element => {\n        const element: Element | null = document.getElementById('result-body');\n        if (element == null) {\n          alertOnSnackbar('复制错误：找不到复制对象');\n          throw new Error('找不到复制对象');\n        }\n        return element;\n      },\n    });\n    result.on('success', () => {\n      setImmediate(() => alertOnSnackbar('已复制到剪贴板！'));\n    });\n    result.on('error', (e: ClipboardJS.Event) => {\n      alertOnSnackbar('复制错误！请双击文本框手动复制吧！');\n      console.error(e);\n    });\n    return result;\n  });\n\n  useEffect(() => {\n    return (): void => {\n      clipboard.destroy();\n    };\n  });\n\n  if (!props.show)\n    return null;\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid\n        item\n        xs={12}\n        className={stepperClasses.Body}\n      >\n        <div\n          className={classes.Output}\n          onDoubleClick={(): void => {\n            const selection = window.getSelection();\n            if (!selection)\n              return;\n            const element = document.getElementById('result-body');\n            if (!element)\n              return;\n            const range = document.createRange();\n            range.selectNode(element);\n            selection.removeAllRanges();\n            selection.addRange(range);\n          }}\n          id='result-body'\n        >\n          <IconButton\n            style={{\n              float: 'right',\n              marginTop: -15,\n            }}\n            id='clipboard-button'\n          >\n            <FileCopyIcon />\n          </IconButton>\n          {processedLines.map((line: AnalysedLine, paragraphId: number) => {\n            const { playerId, content } = line;\n            const player = playersConfig.current[playerId];\n            if (!player.enabled)\n              return null;\n            return (\n              <p\n                key={paragraphId}\n                style={{\n                  color: player.color,\n                }}\n              >\n                {`<${player.displayName}> `}\n                {content.map((contentLine: string, contentId: number) => {\n                  const newLine = contentId === 0 ? [] : [<br key={`br-${contentId}`}/>];\n                  return newLine.concat([<span key={contentId}>{contentLine}</span>]);\n                })}\n              </p>\n            );\n          })}\n        </div>\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            saveConfig(oldConfig.current);\n            onPrevStep();\n          }}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          className={stepperClasses.ControlButton}\n          style={{ backgroundColor: '#d4d45f' }}\n          onClick={onRestart}\n        >\n          再做一团\n        </Button>\n      </Grid>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={snackbarControl.open}\n        autoHideDuration={6000}\n        onClose={(): void => {\n          console.trace();\n          setSnackbarControl({\n            ...snackbarControl,\n            open: false,\n          });\n        }}\n        message={snackbarControl.body}\n      />\n    </Grid>\n  );\n};","import Color from 'color';\n\nexport interface GroupResult {\n  players: AnalysedPlayer[];\n  lines: AnalysedLine[];\n};\n\nexport interface AnalysedLine {\n  playerId: string;\n  time?: string;\n  title?: string;\n  content: string[];\n}\n\nexport interface AnalysedPlayer {\n  playerId: string;\n  allPlayerIds: string[];\n  number?: string;\n  name: string;\n}\n\nexport interface AnalyseResult {\n  lines: AnalysedLine[];\n  playerIds: string[];\n  nextConfig: Configuration;\n}\n\nexport interface ConfigPlayer {\n  displayName: string;\n  enabled: boolean;\n  color: string;\n}\n\nexport interface GeneralConfig {\n  removeLinesStartedWithParenthesis?: boolean;\n  removeLinesStartedWithDot?: boolean;\n  removeLinesStartedWithLenticular?: boolean;\n}\n\nexport const defaultGeneralConfig: Required<GeneralConfig> = {\n  removeLinesStartedWithParenthesis: false,\n  removeLinesStartedWithDot: false,\n  removeLinesStartedWithLenticular: false,\n};\n\nexport const getGeneralConfig = <K extends keyof GeneralConfig>(config: GeneralConfig, key: K): GeneralConfig[K] => {\n  return config[key] || defaultGeneralConfig[key];\n};\n\nexport interface Configuration {\n  players?: Record<string, ConfigPlayer>;\n  general?: GeneralConfig;\n}\n\nexport interface DescribedColor {\n  value: string;\n  name?: string;\n  isLight: boolean;\n}\n\nexport const presetDescribedColors: DescribedColor[] = [\n  { value: \"black\", name: \"黑色\" },\n  { value: \"silver\", name: \"灰色\" },\n  { value: \"red\", name: \"红色\" },\n  { value: \"green\", name: \"绿色\" },\n  { value: \"orange\", name: \"橘色\" },\n  { value: \"purple\", name: \"紫色\" },\n  { value: \"teal\", name: \"蓝绿\" },\n  { value: \"fuchsia\", name: \"桃红\" },\n  { value: \"yellow\", name: \"黄色\" },\n  { value: \"beige\", name: \"米色\" },\n  { value: \"brown\", name: \"棕色\" },\n  { value: \"navy\", name: \"深蓝\" },\n  { value: \"maroon\", name: \"紫红\" },\n  { value: \"limegreen\", name: \"莱姆\" },\n  { value: \"white\", name: \"白色\" },\n  { value: \"brown\", name: \"蓝色\" },\n  { value: \"pink\", name: \"粉红\" },\n].map(({ value, ...others }) => ({\n  ...others,\n  value,\n  isLight: Color(value).isLight(),\n}));","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport interface AlertDialogControl {\n  open: boolean;\n  body?: React.ReactNode;\n}\n\ninterface AlertDialogProps extends AlertDialogControl {\n  onClose: () => void;\n}\n\nconst AlertDialog: React.FC<AlertDialogProps> = ({ open, onClose, body }: AlertDialogProps) => {\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle>出错啦</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {body}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\" autoFocus>\n            好的\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AlertDialog;","import forEach from 'lodash/forEach';\nimport clone from 'lodash/clone';\nimport {\n  Configuration,\n  AnalysedPlayer,\n  AnalyseResult,\n  ConfigPlayer,\n  presetDescribedColors,\n  DescribedColor,\n  GroupResult,\n} from 'common';\n\nconst presetColors: string[] = presetDescribedColors.map(({ value }: DescribedColor) => value);\n\nfunction findFirstPlayerConfig(\n  configPlayers: Record<string, ConfigPlayer>,\n  playerIdGroup: string[],\n): ConfigPlayer | null {\n  for (const playerId of playerIdGroup) {\n    if (configPlayers[playerId])\n      return configPlayers[playerId];\n  }\n  return null;\n}\n\nfunction findFirstUnusedPresetColor(\n  presetColors: string[],\n  currentPlayers: Record<string, ConfigPlayer>,\n): string {\n  const existingColors: Record<string, boolean> = {};\n  forEach(currentPlayers, (player: ConfigPlayer) => {\n    existingColors[player.color] = true;\n  });\n  return presetColors.find((color: string) => !existingColors[color]) || 'black';\n}\n\nexport function analyse(grouped: GroupResult, currentConfig: Configuration): AnalyseResult {\n  const { players, lines } = grouped;\n  const configPlayers: Record<string, ConfigPlayer> = currentConfig.players || {};\n  const currentPlayers: Record<string, ConfigPlayer> = {};\n  for (const player of players) {\n    let configPlayer = findFirstPlayerConfig(configPlayers, player.allPlayerIds);\n    if (!configPlayer) {\n      configPlayer = {\n        enabled: true,\n        displayName: player.name,\n        color: findFirstUnusedPresetColor(presetColors, currentPlayers),\n      };\n    }\n    for (const playerId of player.allPlayerIds) {\n      currentPlayers[playerId] = configPlayer;\n    }\n  };\n  return {\n    lines,\n    playerIds: players.map((player: AnalysedPlayer) => player.playerId),\n    nextConfig: {\n      ...currentConfig,\n      players: {\n        ...configPlayers,\n        ...currentPlayers,\n      }\n    },\n  };\n}","import compact from 'lodash/compact';\nimport trim from 'lodash/trim';\nimport flow from 'lodash/flow';\n\nexport interface ParsedPlayer {\n  name: string;\n  number?: string;\n  title?: string;\n}\n\nexport interface ParsedLine {\n  time?: string;\n  player: ParsedPlayer;\n  content: string[];\n}\n\nexport interface ParseResult {\n  logLines: ParsedLine[];\n}\n\ninterface ParsedHeader {\n  player: ParsedPlayer;\n  time?: string;\n}\n\ntype HeaderParser = (line: string) => ParsedHeader | null;\ntype LogLineConverter = (logLine: ParsedLine) => ParsedLine | null;\n\ninterface LogConfig {\n  headerParser: HeaderParser;\n  logLineConverter: LogLineConverter;\n}\n\nfunction removeSystemTextConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n\n  const withdrawParser = /^.*撤回了一条消息( 重新编辑)?$/;\n  const withdrawMemberParser = /^.*撤回了成员.*的一条消息$/;\n  const withdrawMember2Parser = /^.*撤回了一条成员消息$/;\n  const commonFriendsParser = /^你和.*有\\d+个共同好友，点击添加好友。$/;\n  const joinMemberParser = /^.*加入本群。$/;\n  const inviteMemberParser = /^.*邀请.*加入了本群。$/;\n\n  let end = lines.length - 1;\n  for (; end >=0; end--) {\n    if ([\n      /^ *$/,\n      withdrawParser,\n      withdrawMemberParser,\n      withdrawMember2Parser,\n      commonFriendsParser,\n      joinMemberParser,\n      inviteMemberParser,\n    ].some((toMatch: RegExp) => toMatch.exec(lines[end]))) {\n      continue;\n    }\n    break;\n  }\n  logLine.content = logLine.content.slice(0, end + 1);\n  return logLine;\n}\n\nconst regNumber = /\\(\\d+\\)|<.+@.+\\..+>/;\nconst regTitle = /(?:【(.{1,6})】)?/;\nconst regTime = /\\d{1,2}:\\d{2}:\\d{2}(?: (?:AM|PM))?/;\n\nfunction removeMessageManagerSystemTextConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n\n  const dateParser = /^ \\d{4}-\\d{2}-\\d{2}$/;\n  const withdrawParser = new RegExp(`^${regTime.source}.*撤回了一条消息$`);\n  const withdrawMemberParser = new RegExp(`^${regTime.source}.*撤回了成员.*的一条消息$`);\n  const withdrawMember2Parser = new RegExp(`^${regTime.source}.*撤回了一条成员消息$`);\n  // const commonFriendsParser = /^你和.*有\\d+个共同好友，点击添加好友。$/;\n  const joinMemberParser = new RegExp(`^${regTime.source}.*加入本群。$`);\n  // const inviteMemberParser = /^.*邀请.*加入了本群。$/;\n\n  let end = lines.length - 1;\n  for (; end >=0; end--) {\n    if ([\n      /^ *$/,\n      dateParser,\n      withdrawParser,\n      withdrawMemberParser,\n      withdrawMember2Parser,\n      joinMemberParser,\n    ].some((toMatch: RegExp) => toMatch.exec(lines[end]))) {\n      continue;\n    }\n    break;\n  }\n  logLine.content = logLine.content.slice(0, end + 1);\n  return logLine;\n}\n\nfunction defaultConverter(logLine: ParsedLine | null): ParsedLine | null {\n  if (logLine == null)\n    return null;\n  const lines = logLine.content;\n  // Remove starting and trailing empty lines.\n  while(lines.length > 0 && lines[0].trim() === '') {\n    lines.splice(0, 1);\n  }\n  while(lines.length > 0 && lines[lines.length-1].trim() === '') {\n    lines.splice(lines.length-1, 1);\n  }\n  if (lines.length === 0)\n    return null;\n  return logLine;\n}\n\nfunction trimNumber(src: string): string {\n  return trim(src, '()<>');\n}\n\n// Export from log\n// E.g. \"2019-09-23 8:43:38 PM 骰娘-Roll100(872001750)\"\nconst exportFromLog: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regDateName = new RegExp(`\\\\d{4}-\\\\d{2}-\\\\d{2} ${regTime.source}`);\n    const regHeader = new RegExp(`^(${regDateName.source}) (.*)(${regNumber.source})$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, time, name, number] = matches;\n    return {\n      player: {\n        name,\n        number: trimNumber(number),\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    if (['10000', '1000000'].includes(logLine.player.number || ''))\n      return null;\n    return defaultConverter(logLine);\n  },\n};\n\n// Copy from sidewindow\n// E.g. \"【冒泡】无情的围观熊 2/14/2020 9:16:13 PM\"\nconst copyFromSideWindow: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regDateTime = new RegExp(`\\\\d{1,4}\\\\/\\\\d{1,2}\\\\/\\\\d{1,4} ${regTime.source}`);\n    const regHeader = new RegExp(`^${regTitle.source}(.*?) (${regDateTime.source})$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from chat\n// E.g. \"【煤油】丧 丧 熊 9:59:54 PM\"\nconst copyFromChat: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = new RegExp(`^${regTitle.source}(.*) (${regTime.source})$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from message manager\n// E.g. \"织练取(958884) 3:13:28 AM\"\nconst copyFromMessageManager: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = new RegExp(`^${regTitle.source}(.*?)(${regNumber.source}) (${regTime.source})$`);\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, title, name, number, time] = matches;\n    return {\n      player: {\n        name,\n        title,\n        number: trimNumber(number),\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return flow(\n      removeMessageManagerSystemTextConverter,\n      defaultConverter,\n    )(logLine);\n  },\n};\n\n// Copy from mobile\n// E.g. \"a dark ideation  23:50:40\"\nconst copyFromMobile: LogConfig = {\n  headerParser: (line: string): ParsedHeader | null => {\n    const regHeader = /^(.*?) {2}(\\d{1,2}:\\d{2}:\\d{2}) *$/;\n    const matches = regHeader.exec(line);\n    if (!matches)\n      return null;\n    const [_all, name, time] = matches;\n    return {\n      player: {\n        name,\n      },\n      time,\n    };\n  },\n  logLineConverter: (logLine: ParsedLine): ParsedLine | null => {\n    return defaultConverter(logLine);\n  },\n};\n\nexport function parseChat(data: string): ParseResult {\n  const logLines: ParsedLine[] = [];\n  let firstLogConfig: LogConfig | undefined = undefined;\n  for (const line of data.split('\\n')) {\n    const parsedHeader = ((): ParsedHeader | null => {\n      if (firstLogConfig)\n        return firstLogConfig.headerParser(line);\n      for (const logConfig of [\n        copyFromMessageManager,\n        copyFromMobile,\n        exportFromLog,\n        copyFromSideWindow,\n        copyFromChat,\n      ]) {\n        const result = logConfig.headerParser(line);\n        if (result) {\n          firstLogConfig = logConfig;\n          return result;\n        }\n      }\n      return null;\n    })();\n    if (parsedHeader) {\n      logLines.push({\n        ...parsedHeader,\n        content: [],\n      });\n    } else {\n      if (firstLogConfig) {\n        const currentLogLine: ParsedLine | undefined = logLines[logLines.length - 1];\n        // Content after a recognizable header\n        if (currentLogLine)\n          currentLogLine.content.push(line);\n      } else {\n        // Unrecognizable content before the first header\n        // Do nothing\n      }\n    }\n  }\n  if (!firstLogConfig)\n    return { logLines: [] };\n\n  const convertedLogLines = compact(\n    logLines.map(firstLogConfig.logLineConverter)\n  );\n  return { logLines: convertedLogLines };\n}","import values from 'lodash/values';\n\nimport { parseChat, ParseResult, ParsedPlayer } from './parser_chat';\nimport {\n  GroupResult,\n  AnalysedLine,\n  AnalysedPlayer,\n} from 'common';\n\nfunction getPlayerIdGroup(player: ParsedPlayer): string[] {\n  const ids: string[] = [];\n  if (player.number)\n    ids.push(`qq:${player.number}`);\n  ids.push(`name:${player.name}`);\n  return ids;\n}\n\nfunction groupByPlayers(result: ParseResult): GroupResult {\n  const lines: AnalysedLine[] = [];\n  const players: Record<string, AnalysedPlayer> = {};\n  for (const parsedLine of result.logLines) {\n    const { player, time, content } = parsedLine;\n    const playerIdGroup = getPlayerIdGroup(player);\n    const majorPlayerId = playerIdGroup[0];\n    if (!players[majorPlayerId])\n      players[majorPlayerId] = {\n        playerId: majorPlayerId,\n        allPlayerIds: playerIdGroup,\n        name: player.name,\n        number: player.number,\n      };\n    lines.push({\n      playerId: majorPlayerId,\n      time,\n      title: player.title,\n      content,\n    });\n  }\n  return {\n    lines,\n    players: values(players),\n  };\n}\n\nexport function parseAndGroup(source: string): GroupResult {\n  const parseResult: ParseResult = parseChat(source);\n  return groupByPlayers(parseResult);\n}","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport AlertDialog, { AlertDialogControl } from './AlertDialog';\nimport { useStepperStyles } from './App-classes';\n\nimport { parseAndGroup } from 'parser';\nimport { GroupResult } from 'common';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface StepSourceInitState {\n}\n\nexport type StepSourceResult = GroupResult;\n\ninterface StepSourceProps {\n  initState: StepSourceInitState;\n  onNextStep: (result: StepSourceResult) => void;\n  show: boolean;\n}\n\nexport const StepSource: React.FC<StepSourceProps> = (props: StepSourceProps) => {\n  const { onNextStep } = props;\n  const stepperClasses = useStepperStyles();\n  const [text, setText] = useState<string>('');\n\n  const [alertControl, setAlertControl] = useState<AlertDialogControl>({\n    open: false,\n  });\n\n  if (!props.show)\n    return null;\n\n  function processResult(text: string): GroupResult | undefined {\n    const groupResult = parseAndGroup(text);\n    if (groupResult.players.length === 0 || groupResult.lines.length === 0) {\n      setAlertControl({\n        open: true,\n        body: '无法从这段记录中找到可识别的部分！请检查后再试一次吧！',\n      });\n      return undefined;\n    }\n    return groupResult;\n  }\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"原文\"\n          placeholder=\"把原文粘贴到这里，然后点击下一步。\"\n          variant=\"outlined\"\n          multiline\n          fullWidth\n          rows={10}\n          className='Source-textfield'\n          onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n            setText(event.target.value);\n          }}\n          value={text}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={text.length < 5}\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            const result = processResult(text);\n            if (result) {\n              onNextStep(result);\n            }\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n      <AlertDialog\n        onClose={(): void => setAlertControl({\n          ...alertControl,\n          open: false,\n        })}\n        {...alertControl}\n      />\n    </Grid>\n  );\n};","import React, { useState, useRef } from 'react';\nimport Color from 'color';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Select from '@material-ui/core/Select';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport { useStepperStyles } from './App-classes';\nimport { getGeneralConfig, Configuration, AnalysedLine, DescribedColor, ConfigPlayer, presetDescribedColors, GeneralConfig } from 'common';\n\nexport interface StepConfigInitState {\n  lines: AnalysedLine[];\n  playerIds: string[];\n  config: Configuration;\n}\n\nexport interface StepConfigResult {\n  lines: AnalysedLine[];\n  newConfig: Configuration;\n}\n\ninterface PlayerConfigProps {\n  name: string;\n  color: string;\n  enabled: boolean;\n  setName: (value: string) => void;\n  setColor: (value: string) => void;\n  setEnabled: (value: boolean) => void;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    PlayerConfig: {\n    },\n    Center: {\n      display: 'flex',\n      alignItems: 'center',\n    },\n  }),\n);\n\nconst PlayerConfig: React.FC<PlayerConfigProps> = (props: PlayerConfigProps) => {\n  const classes = useStyles();\n  return (\n    <Grid item xs={6}>\n      <Grid container>\n        <Grid item xs={8}>\n          <TextField\n            defaultValue={props.name}\n            variant=\"outlined\"\n            fullWidth\n            onBlur={(event: React.FocusEvent<HTMLInputElement>): void => {\n              props.setName(event.target.value || '');\n            }}\n          />\n        </Grid>\n        <Grid item xs={4} className={classes.Center}>\n          <Grid container>\n            <FormGroup row className={classes.Center}>\n              <FormControl>\n                <Switch\n                  checked={props.enabled}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void => {\n                    props.setEnabled(checked);\n                  }}\n                  value=\"primary\"\n                />\n              </FormControl>\n              <FormControl style={props.enabled ? {} : { visibility: 'hidden' }}>\n                <Select\n                  style={{\n                    backgroundColor: props.color,\n                    color: Color(props.color).isLight() ? 'black' : 'white',\n                    padding: 4,\n                  }}\n                  native\n                  value={props.color}\n                  onChange={(event: React.ChangeEvent<{ name?: string; value: unknown }>): void => {\n                    props.setColor(event.target.value as string);\n                  }}\n                >\n                  {presetDescribedColors.map((describedColor: DescribedColor): React.ReactNode => {\n                    const { value, name, isLight } = describedColor;\n                    return (\n                      <option\n                        key={value}\n                        value={value}\n                        style={{\n                          backgroundColor: value,\n                          color: isLight ? 'black' : 'white',\n                        }}\n                      >\n                        {name || value}\n                      </option>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n            </FormGroup>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\ninterface SourceInputProps {\n  initState: StepConfigInitState;\n  onPrevStep: () => void;\n  onNextStep: (result: StepConfigResult) => void;\n  show: boolean;\n}\n\ninterface StepConfigPlayersProps {\n  playerIds: string[];\n  players: Record<string, ConfigPlayer>;\n  setPlayer: (id: string, value: ConfigPlayer) => void;\n}\n\nconst StepConfigPlayers: React.FC<StepConfigPlayersProps> = (props: StepConfigPlayersProps) => {\n  const { playerIds, players, setPlayer } = props;\n  return (\n    <Grid container>\n      {playerIds.map((playerId: string) => {\n        const player = players[playerId];\n        return (\n          <PlayerConfig\n            key={playerId}\n            name={player.displayName}\n            setName={(value: string): void => {\n              setPlayer(playerId, {\n                ...player,\n                displayName: value,\n              });\n            }}\n            enabled={player.enabled}\n            setEnabled={(value: boolean): void => {\n              setPlayer(playerId, {\n                ...player,\n                enabled: value,\n              });\n            }}\n            color={player.color}\n            setColor={(value: string): void => {\n              setPlayer(playerId, {\n                ...player,\n                color: value,\n              });\n            }}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n\ninterface StepConfigGeneralProps {\n  value: GeneralConfig;\n  setValue: (value: GeneralConfig) => void;\n}\n\nconst StepConfigGeneral: React.FC<StepConfigGeneralProps> = (props: StepConfigGeneralProps) => {\n  const { value, setValue } = props;\n\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={getGeneralConfig(value, 'removeLinesStartedWithParenthesis')}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithParenthesis: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以(（开头的行\"\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={getGeneralConfig(value, 'removeLinesStartedWithDot')}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithDot: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以.。开头的行\"\n      />\n      <FormControlLabel\n        control={\n          <Switch\n            checked={getGeneralConfig(value, 'removeLinesStartedWithLenticular')}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>): void => {\n              setValue({\n                ...value,\n                removeLinesStartedWithLenticular: event.target.checked,\n              });\n            }}\n            color=\"primary\"\n          />\n        }\n        label=\"去掉以【开头的行\"\n      />\n    </FormGroup>\n  );\n};\n\nexport const StepConfig: React.FC<SourceInputProps> = (props: SourceInputProps) => {\n  const { initState, onPrevStep, onNextStep } = props;\n  const stepperClasses = useStepperStyles();\n  const [players, setPlayers] = useState<Record<string, ConfigPlayer>>(\n    () => initState.config.players || {},\n  );\n  const playerIds = useRef<string[]>(initState.playerIds);\n  const [generalConfig, setGeneralConfig] = useState<GeneralConfig>(\n    () => initState.config.general || {},\n  );\n  const lines = useRef<AnalysedLine[]>(initState.lines);\n  function setPlayer(id: string, value: ConfigPlayer): void {\n    setPlayers({ ...players, [id]: value });\n  }\n\n  if (!props.show)\n    return null;\n\n  return (\n    <Grid container className={stepperClasses.Container}>\n      <Grid item xs={12} className={stepperClasses.Body}>\n        <StepConfigGeneral\n          value={generalConfig}\n          setValue={setGeneralConfig}\n        />\n        <StepConfigPlayers\n          playerIds={playerIds.current}\n          players={players}\n          setPlayer={setPlayer}\n        />\n      </Grid>\n      <Grid item xs={12} justify=\"flex-end\" className={stepperClasses.Control}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          className={stepperClasses.ControlButton}\n          onClick={onPrevStep}\n        >\n          上一步\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={stepperClasses.ControlButton}\n          onClick={(): void => {\n            onNextStep({\n              lines: lines.current,\n              newConfig: {\n                players,\n                general: generalConfig,\n              },\n            });\n          }}\n        >\n          下一步\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};","import React, { useState } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\n\ninterface BaseStep<InArg> {\n  show: boolean;\n  initState: InArg;\n}\n\ninterface WithOutArg<OutArg> {\n  onNextStep: (result: OutArg) => void;\n}\n\ninterface WithPrevStep {\n  onPrevStep: () => void;\n}\n\ninterface WithRestart {\n  onRestart: () => void;\n}\n\ninterface MultiStepProps<I1, O1, I2, O2, I3> {\n  onInit1: () => I1;\n  step1: React.ComponentType<BaseStep<I1> & WithOutArg<O1>>;\n  onInit2: (o: O1) => I2;\n  step2: React.ComponentType<BaseStep<I2> & WithOutArg<O2> & WithPrevStep>;\n  onInit3: (o: O2) => I3;\n  step3: React.ComponentType<BaseStep<I3> & WithPrevStep & WithRestart>;\n}\n\nconst MultiStep = <I1, O1, I2, O2, I3>(\n  props: MultiStepProps<I1, O1, I2, O2, I3>,\n): React.ReactElement | null => {\n  const { onInit1, step1: Step1, onInit2, step2: Step2, onInit3, step3: Step3 } = props;\n  // `session` is used to refresh steps (mostly step 1) on restart.\n  const [session, setSession] = useState<number>(0);\n  const [initStates, setInitStates] = useState<[I1?, I2?, I3?]>([]);\n\n  const handleRestart = (): void => {\n    setSession(session + 1);\n    setInitStates([\n      onInit1(),\n    ]);\n  };\n\n  if (initStates.length === 0) {\n    handleRestart();\n  }\n\n  return (\n    <Grid container xs={12}>\n      {initStates[0] == null ? null : (\n        <Step1\n          key={`${session}-1`}\n          show={initStates.length === 1}\n          initState={initStates[0]}\n          onNextStep={(result: O1): void => {\n            setInitStates([\n              initStates[0],\n              onInit2(result),\n            ]);\n          }}\n        />\n      )}\n\n      {initStates[1] == null ? null : (\n        <Step2\n          key={`${session}-2`}\n          show={initStates.length === 2}\n          initState={initStates[1]}\n          onPrevStep={(): void => {\n            setInitStates([\n              initStates[0],\n            ]);\n          }}\n          onNextStep={(result: O2): void => {\n            setInitStates([\n              initStates[0],\n              initStates[1],\n              onInit3(result),\n            ]);\n          }}\n        />\n      )}\n\n      {initStates[2] == null ? null : (\n        <Step3\n          key={`${session}-3`}\n          show={initStates.length === 3}\n          initState={initStates[2]}\n          onPrevStep={(): void => {\n            setInitStates([\n              initStates[0],\n              initStates[1],\n            ]);\n          }}\n          onRestart={handleRestart}\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport default MultiStep;","import React from 'react';\nimport SVGInline from 'react-svg-inline';\n\nimport GithubIcon from 'simple-icons/icons/github';\n\nimport { makeStyles, createStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport './index.css';\nimport './App.css';\nimport { StepSource, StepSourceResult, StepSourceInitState } from './StepSource';\nimport { StepConfig, StepConfigResult, StepConfigInitState } from './StepConfig';\nimport { StepResult, StepResultInitState } from './StepResult';\nimport MultiStep from './MultiStep';\nimport { saveConfig, loadConfig } from './storage';\nimport { analyse } from 'parser';\n\nconst useHeaderStyles = makeStyles(() =>\n  createStyles({\n    logo: {\n      marginRight: 15,\n      backgroundColor: 'white',\n    },\n    horizontalFill: {\n      flex: '1 0 auto',\n    },\n    toolbarIcon: {\n      height: 24,\n      width: 24,\n      fill: 'white',\n    },\n  }),\n);\n\ninterface HeaderProps {\n  repoUrl: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ repoUrl }: HeaderProps) => {\n  const classes = useHeaderStyles();\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <Avatar alt=\"Logo\" src=\"/android-chrome-512x512.png\" className={classes.logo} />\n        <Typography variant=\"h6\" className={classes.horizontalFill}>\n          DK的跑团记录着色器\n        </Typography>\n        <IconButton\n          aria-label=\"GitHub\"\n          href={repoUrl}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <SVGInline\n            svg={GithubIcon.svg}\n            className={classes.toolbarIcon}\n          />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface MainProps {\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Main: React.FC<MainProps> = (props: MainProps) => {\n  return (\n    <MultiStep<\n        StepSourceInitState,\n        StepSourceResult,\n        StepConfigInitState,\n        StepConfigResult,\n        StepResultInitState\n      >\n      onInit1={(): StepSourceInitState => ({})}\n      step1={StepSource}\n      onInit2={(result: StepSourceResult): StepConfigInitState => {\n        const config = loadConfig();\n        const analysedResult = analyse(result, config);\n        return {\n          lines: analysedResult.lines,\n          playerIds: analysedResult.playerIds,\n          config: analysedResult.nextConfig,\n        };\n      }}\n      step2={StepConfig}\n      onInit3={(result: StepConfigResult): StepResultInitState => {\n        const oldConfig = loadConfig();\n        saveConfig(result.newConfig);\n        return {\n          lines: result.lines,\n          config: result.newConfig,\n          oldConfig,\n        };\n      }}\n      step3={StepResult}\n    />\n  );\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#795548',\n    },\n    secondary: {\n      main: '#00897b',\n    },\n  },\n});\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"root\">\n        <Header\n          repoUrl='https://github.com/dkwingsmt/log-painter'\n        />\n        <Container maxWidth='md' className='Body-container'>\n          <Main />\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'web';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\n\nexport const useStepperStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    Control: {\n      display: 'flex',\n      marginTop: 20,\n    },\n    Body: {\n    },\n    Container: {\n    },\n    ControlButton: {\n      width: 100,\n      marginLeft: 10,\n    }\n  }),\n);","import Store from 'store';\nimport { Configuration } from 'common';\n\nconst emptyConfiguration: Configuration = { players: {} };\n\nexport function loadConfig(): Configuration {\n  return Store.get('config') || emptyConfiguration;\n}\n\nexport function saveConfig(config: Configuration): void {\n  Store.set('config', config);\n}"],"sourceRoot":""}